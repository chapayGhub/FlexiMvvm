// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

#if __ANDROID_29__
using AndroidX.AppCompat.App;
using AndroidX.AppCompat.Widget;
using AndroidX.Core.OS;
using AndroidX.Core.View;
using AndroidX.Core.Widget;
using AndroidX.DrawerLayout.Widget;
using AndroidX.Fragment.App;
using AndroidX.RecyclerView.Widget;
using AndroidX.SlidingPaneLayout.Widget;
using AndroidX.SwipeRefreshLayout.Widget;
using AndroidX.ViewPager.Widget;
using Google.Android.Material.AppBar;
using Google.Android.Material.BottomNavigation;
using Google.Android.Material.Navigation;
using Google.Android.Material.Tabs;
#else
using Android.Support.Design.Widget;
using Android.Support.V4.App;
using Android.Support.V4.OS;
using Android.Support.V4.View;
using Android.Support.V4.Widget;
using Android.Support.V7.App;
using Android.Support.V7.Widget;
#endif
using System;
using FlexiMvvm.Weak.Subscriptions;

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.AccessibilityServices.AccessibilityService.SoftKeyboardController"/> class events.</summary>
    public static class SoftKeyboardControllerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ShowModeChangedWeakSubscribe(
            this Android.AccessibilityServices.AccessibilityService.SoftKeyboardController eventSource,
            EventHandler<Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.AccessibilityServices.AccessibilityService.SoftKeyboardController, Android.AccessibilityServices.AccessibilityService.SoftKeyboardController.ShowModeChangedEventArgs>(
                eventSource,
                (source, handler) => source.ShowModeChanged += handler,
                (source, handler) => source.ShowModeChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Accounts.AccountManager"/> class events.</summary>
    public static class AccountManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Accounts.AccountManager.AccountsUpdated"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Accounts.AccountManager.AccountsUpdated"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AccountsUpdatedWeakSubscribe(
            this Android.Accounts.AccountManager eventSource,
            EventHandler<Android.Accounts.AccountsUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Accounts.AccountManager, Android.Accounts.AccountsUpdateEventArgs>(
                eventSource,
                (source, handler) => source.AccountsUpdated += handler,
                (source, handler) => source.AccountsUpdated -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Animation.Animator"/> class events.</summary>
    public static class AnimatorWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationCancel"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationCancel"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationCancelWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator>(
                eventSource,
                (source, handler) => source.AnimationCancel += handler,
                (source, handler) => source.AnimationCancel -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationEnd"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationEnd"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationEndWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator>(
                eventSource,
                (source, handler) => source.AnimationEnd += handler,
                (source, handler) => source.AnimationEnd -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationPause"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationPause"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationPauseWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler<Android.Animation.Animator.AnimationPauseEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator, Android.Animation.Animator.AnimationPauseEventArgs>(
                eventSource,
                (source, handler) => source.AnimationPause += handler,
                (source, handler) => source.AnimationPause -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationRepeat"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationRepeat"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationRepeatWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator>(
                eventSource,
                (source, handler) => source.AnimationRepeat += handler,
                (source, handler) => source.AnimationRepeat -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationResume"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationResume"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationResumeWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler<Android.Animation.Animator.AnimationResumeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator, Android.Animation.Animator.AnimationResumeEventArgs>(
                eventSource,
                (source, handler) => source.AnimationResume += handler,
                (source, handler) => source.AnimationResume -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.Animator.AnimationStart"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.Animator.AnimationStart"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationStartWeakSubscribe(
            this Android.Animation.Animator eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.Animator>(
                eventSource,
                (source, handler) => source.AnimationStart += handler,
                (source, handler) => source.AnimationStart -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Animation.LayoutTransition"/> class events.</summary>
    public static class LayoutTransitionWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Animation.LayoutTransition.EndTransition"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.LayoutTransition.EndTransition"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EndTransitionWeakSubscribe(
            this Android.Animation.LayoutTransition eventSource,
            EventHandler<Android.Animation.LayoutTransition.EndTransitionEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.LayoutTransition, Android.Animation.LayoutTransition.EndTransitionEventArgs>(
                eventSource,
                (source, handler) => source.EndTransition += handler,
                (source, handler) => source.EndTransition -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Animation.LayoutTransition.StartTransition"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.LayoutTransition.StartTransition"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable StartTransitionWeakSubscribe(
            this Android.Animation.LayoutTransition eventSource,
            EventHandler<Android.Animation.LayoutTransition.StartTransitionEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.LayoutTransition, Android.Animation.LayoutTransition.StartTransitionEventArgs>(
                eventSource,
                (source, handler) => source.StartTransition += handler,
                (source, handler) => source.StartTransition -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Animation.TimeAnimator"/> class events.</summary>
    public static class TimeAnimatorWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Animation.TimeAnimator.Time"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.TimeAnimator.Time"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TimeWeakSubscribe(
            this Android.Animation.TimeAnimator eventSource,
            EventHandler<Android.Animation.TimeAnimator.TimeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.TimeAnimator, Android.Animation.TimeAnimator.TimeEventArgs>(
                eventSource,
                (source, handler) => source.Time += handler,
                (source, handler) => source.Time -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Animation.ValueAnimator"/> class events.</summary>
    public static class ValueAnimatorWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Animation.ValueAnimator.Update"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Animation.ValueAnimator.Update"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable UpdateWeakSubscribe(
            this Android.Animation.ValueAnimator eventSource,
            EventHandler<Android.Animation.ValueAnimator.AnimatorUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Animation.ValueAnimator, Android.Animation.ValueAnimator.AnimatorUpdateEventArgs>(
                eventSource,
                (source, handler) => source.Update += handler,
                (source, handler) => source.Update -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.ActionBar"/> class events.</summary>
    public static class ActionBarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.ActionBar.MenuVisibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.ActionBar.MenuVisibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuVisibilityWeakSubscribe(
            this Android.App.ActionBar eventSource,
            EventHandler<Android.App.ActionBar.MenuVisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.ActionBar, Android.App.ActionBar.MenuVisibilityEventArgs>(
                eventSource,
                (source, handler) => source.MenuVisibility += handler,
                (source, handler) => source.MenuVisibility -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.ActionBar.Tab"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class TabWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.ActionBar.Tab.TabReselected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.ActionBar.Tab.TabReselected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabReselectedWeakSubscribe(
            this Android.App.ActionBar.Tab eventSource,
            EventHandler<Android.App.ActionBar.TabEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.ActionBar.Tab, Android.App.ActionBar.TabEventArgs>(
                eventSource,
                (source, handler) => source.TabReselected += handler,
                (source, handler) => source.TabReselected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.ActionBar.Tab.TabSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.ActionBar.Tab.TabSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabSelectedWeakSubscribe(
            this Android.App.ActionBar.Tab eventSource,
            EventHandler<Android.App.ActionBar.TabEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.ActionBar.Tab, Android.App.ActionBar.TabEventArgs>(
                eventSource,
                (source, handler) => source.TabSelected += handler,
                (source, handler) => source.TabSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.ActionBar.Tab.TabUnselected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.ActionBar.Tab.TabUnselected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabUnselectedWeakSubscribe(
            this Android.App.ActionBar.Tab eventSource,
            EventHandler<Android.App.ActionBar.TabEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.ActionBar.Tab, Android.App.ActionBar.TabEventArgs>(
                eventSource,
                (source, handler) => source.TabUnselected += handler,
                (source, handler) => source.TabUnselected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.AlertDialog.Builder"/> class events.</summary>
    public static class BuilderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.AlertDialog.Builder.ItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.AlertDialog.Builder.ItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemSelectedWeakSubscribe(
            this Android.App.AlertDialog.Builder eventSource,
            EventHandler<Android.Widget.AdapterView.ItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.AlertDialog.Builder, Android.Widget.AdapterView.ItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ItemSelected += handler,
                (source, handler) => source.ItemSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.AlertDialog.Builder.ItemSelectionCleared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.AlertDialog.Builder.ItemSelectionCleared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        [Obsolete("Use NothingSelected event instead.")]
        public static IDisposable ItemSelectionClearedWeakSubscribe(
            this Android.App.AlertDialog.Builder eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.AlertDialog.Builder>(
                eventSource,
                (source, handler) => source.ItemSelectionCleared += handler,
                (source, handler) => source.ItemSelectionCleared -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.AlertDialog.Builder.NothingSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.AlertDialog.Builder.NothingSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NothingSelectedWeakSubscribe(
            this Android.App.AlertDialog.Builder eventSource,
            EventHandler<Android.Widget.AdapterView.NothingSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.AlertDialog.Builder, Android.Widget.AdapterView.NothingSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NothingSelected += handler,
                (source, handler) => source.NothingSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.DatePickerDialog"/> class events.</summary>
    public static class DatePickerDialogWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.DatePickerDialog.DateSet"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.DatePickerDialog.DateSet"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DateSetWeakSubscribe(
            this Android.App.DatePickerDialog eventSource,
            EventHandler<Android.App.DatePickerDialog.DateSetEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.DatePickerDialog, Android.App.DatePickerDialog.DateSetEventArgs>(
                eventSource,
                (source, handler) => source.DateSet += handler,
                (source, handler) => source.DateSet -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.Dialog"/> class events.</summary>
    public static class DialogWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.Dialog.CancelEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.Dialog.CancelEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CancelEventWeakSubscribe(
            this Android.App.Dialog eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.Dialog>(
                eventSource,
                (source, handler) => source.CancelEvent += handler,
                (source, handler) => source.CancelEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.Dialog.DismissEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.Dialog.DismissEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissEventWeakSubscribe(
            this Android.App.Dialog eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.Dialog>(
                eventSource,
                (source, handler) => source.DismissEvent += handler,
                (source, handler) => source.DismissEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.Dialog.KeyPress"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.Dialog.KeyPress"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable KeyPressWeakSubscribe(
            this Android.App.Dialog eventSource,
            EventHandler<Android.Content.DialogKeyEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.Dialog, Android.Content.DialogKeyEventArgs>(
                eventSource,
                (source, handler) => source.KeyPress += handler,
                (source, handler) => source.KeyPress -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.Dialog.ShowEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.Dialog.ShowEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ShowEventWeakSubscribe(
            this Android.App.Dialog eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.Dialog>(
                eventSource,
                (source, handler) => source.ShowEvent += handler,
                (source, handler) => source.ShowEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.FragmentBreadCrumbs"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class FragmentBreadCrumbsWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.FragmentBreadCrumbs.BreadCrumbClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.FragmentBreadCrumbs.BreadCrumbClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BreadCrumbClickWeakSubscribe(
            this Android.App.FragmentBreadCrumbs eventSource,
            EventHandler<Android.App.FragmentBreadCrumbs.BreadCrumbClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.FragmentBreadCrumbs, Android.App.FragmentBreadCrumbs.BreadCrumbClickEventArgs>(
                eventSource,
                (source, handler) => source.BreadCrumbClick += handler,
                (source, handler) => source.BreadCrumbClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.FragmentManager"/> class events.</summary>
#if __ANDROID_28__
    [Obsolete("This class is obsoleted in this android platform.")]
#endif
    public static class FragmentManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.FragmentManager.BackStackChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.FragmentManager.BackStackChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BackStackChangedWeakSubscribe(
            this Android.App.FragmentManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.FragmentManager>(
                eventSource,
                (source, handler) => source.BackStackChanged += handler,
                (source, handler) => source.BackStackChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.MediaRouteActionProvider"/> class events.</summary>
    public static class MediaRouteActionProviderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.MediaRouteActionProvider.ExtendedSettingsClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.MediaRouteActionProvider.ExtendedSettingsClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ExtendedSettingsClickWeakSubscribe(
            this Android.App.MediaRouteActionProvider eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.MediaRouteActionProvider>(
                eventSource,
                (source, handler) => source.ExtendedSettingsClick += handler,
                (source, handler) => source.ExtendedSettingsClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.MediaRouteButton"/> class events.</summary>
    public static class MediaRouteButtonWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.MediaRouteButton.ExtendedSettingsClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.MediaRouteButton.ExtendedSettingsClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ExtendedSettingsClickWeakSubscribe(
            this Android.App.MediaRouteButton eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.MediaRouteButton>(
                eventSource,
                (source, handler) => source.ExtendedSettingsClick += handler,
                (source, handler) => source.ExtendedSettingsClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.SearchManager"/> class events.</summary>
    public static class SearchManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.SearchManager.Cancel"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.SearchManager.Cancel"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CancelWeakSubscribe(
            this Android.App.SearchManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.SearchManager>(
                eventSource,
                (source, handler) => source.Cancel += handler,
                (source, handler) => source.Cancel -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.App.SearchManager.Dismiss"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.SearchManager.Dismiss"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissWeakSubscribe(
            this Android.App.SearchManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.SearchManager>(
                eventSource,
                (source, handler) => source.Dismiss += handler,
                (source, handler) => source.Dismiss -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.App.UiAutomation"/> class events.</summary>
    public static class UiAutomationWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.App.UiAutomation.AccessibilityEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.App.UiAutomation.AccessibilityEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AccessibilityEventWeakSubscribe(
            this Android.App.UiAutomation eventSource,
            EventHandler<Android.App.UiAutomation.AccessibilityEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.App.UiAutomation, Android.App.UiAutomation.AccessibilityEventEventArgs>(
                eventSource,
                (source, handler) => source.AccessibilityEvent += handler,
                (source, handler) => source.AccessibilityEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Content.ClipboardManager"/> class events.</summary>
    public static class ClipboardManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Content.ClipboardManager.PrimaryClipChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Content.ClipboardManager.PrimaryClipChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PrimaryClipChangedWeakSubscribe(
            this Android.Content.ClipboardManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Content.ClipboardManager>(
                eventSource,
                (source, handler) => source.PrimaryClipChanged += handler,
                (source, handler) => source.PrimaryClipChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Drm.DrmManagerClient"/> class events.</summary>
    public static class DrmManagerClientWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Drm.DrmManagerClient.Error"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Drm.DrmManagerClient.Error"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ErrorWeakSubscribe(
            this Android.Drm.DrmManagerClient eventSource,
            EventHandler<Android.Drm.DrmManagerClient.ErrorEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Drm.DrmManagerClient, Android.Drm.DrmManagerClient.ErrorEventArgs>(
                eventSource,
                (source, handler) => source.Error += handler,
                (source, handler) => source.Error -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Drm.DrmManagerClient.Event"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Drm.DrmManagerClient.Event"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EventWeakSubscribe(
            this Android.Drm.DrmManagerClient eventSource,
            EventHandler<Android.Drm.DrmManagerClient.EventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Drm.DrmManagerClient, Android.Drm.DrmManagerClient.EventEventArgs>(
                eventSource,
                (source, handler) => source.Event += handler,
                (source, handler) => source.Event -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Drm.DrmManagerClient.Info"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Drm.DrmManagerClient.Info"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InfoWeakSubscribe(
            this Android.Drm.DrmManagerClient eventSource,
            EventHandler<Android.Drm.DrmManagerClient.InfoEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Drm.DrmManagerClient, Android.Drm.DrmManagerClient.InfoEventArgs>(
                eventSource,
                (source, handler) => source.Info += handler,
                (source, handler) => source.Info -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Gestures.GestureOverlayView"/> class events.</summary>
    public static class GestureOverlayViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GestureCancelled"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GestureCancelled"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GestureCancelledWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GestureCancelledEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GestureCancelledEventArgs>(
                eventSource,
                (source, handler) => source.GestureCancelled += handler,
                (source, handler) => source.GestureCancelled -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GestureEnded"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GestureEnded"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GestureEndedWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GestureEndedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GestureEndedEventArgs>(
                eventSource,
                (source, handler) => source.GestureEnded += handler,
                (source, handler) => source.GestureEnded -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GestureEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GestureEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GestureEventWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GestureEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GestureEventArgs>(
                eventSource,
                (source, handler) => source.GestureEvent += handler,
                (source, handler) => source.GestureEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GesturePerformed"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GesturePerformed"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GesturePerformedWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GesturePerformedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GesturePerformedEventArgs>(
                eventSource,
                (source, handler) => source.GesturePerformed += handler,
                (source, handler) => source.GesturePerformed -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GestureStarted"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GestureStarted"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GestureStartedWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GestureStartedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GestureStartedEventArgs>(
                eventSource,
                (source, handler) => source.GestureStarted += handler,
                (source, handler) => source.GestureStarted -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GesturingEnded"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GesturingEnded"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GesturingEndedWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GesturingEndedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GesturingEndedEventArgs>(
                eventSource,
                (source, handler) => source.GesturingEnded += handler,
                (source, handler) => source.GesturingEnded -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Gestures.GestureOverlayView.GesturingStarted"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Gestures.GestureOverlayView.GesturingStarted"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GesturingStartedWeakSubscribe(
            this Android.Gestures.GestureOverlayView eventSource,
            EventHandler<Android.Gestures.GestureOverlayView.GesturingStartedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Gestures.GestureOverlayView, Android.Gestures.GestureOverlayView.GesturingStartedEventArgs>(
                eventSource,
                (source, handler) => source.GesturingStarted += handler,
                (source, handler) => source.GesturingStarted -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Graphics.ImageDecoder"/> class events.</summary>
    public static class ImageDecoderWeakEventSubscriptionExtensions
    {
#if __ANDROID_28__
        /// <summary>Weak subscription on <see cref="Android.Graphics.ImageDecoder.PartialImage"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Graphics.ImageDecoder.PartialImage"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PartialImageWeakSubscribe(
            this Android.Graphics.ImageDecoder eventSource,
            EventHandler<Android.Graphics.ImageDecoder.PartialImageEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Graphics.ImageDecoder, Android.Graphics.ImageDecoder.PartialImageEventArgs>(
                eventSource,
                (source, handler) => source.PartialImage += handler,
                (source, handler) => source.PartialImage -= handler,
                eventHandler);
        }
#endif

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Graphics.SurfaceTexture"/> class events.</summary>
    public static class SurfaceTextureWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Graphics.SurfaceTexture.FrameAvailable"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Graphics.SurfaceTexture.FrameAvailable"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FrameAvailableWeakSubscribe(
            this Android.Graphics.SurfaceTexture eventSource,
            EventHandler<Android.Graphics.SurfaceTexture.FrameAvailableEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Graphics.SurfaceTexture, Android.Graphics.SurfaceTexture.FrameAvailableEventArgs>(
                eventSource,
                (source, handler) => source.FrameAvailable += handler,
                (source, handler) => source.FrameAvailable -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Hardware.Camera"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class CameraWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Hardware.Camera.FaceDetection"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Hardware.Camera.FaceDetection"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FaceDetectionWeakSubscribe(
            this Android.Hardware.Camera eventSource,
            EventHandler<Android.Hardware.Camera.FaceDetectionEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Hardware.Camera, Android.Hardware.Camera.FaceDetectionEventArgs>(
                eventSource,
                (source, handler) => source.FaceDetection += handler,
                (source, handler) => source.FaceDetection -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Hardware.Camera.ZoomChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Hardware.Camera.ZoomChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ZoomChangeWeakSubscribe(
            this Android.Hardware.Camera eventSource,
            EventHandler<Android.Hardware.Camera.ZoomChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Hardware.Camera, Android.Hardware.Camera.ZoomChangeEventArgs>(
                eventSource,
                (source, handler) => source.ZoomChange += handler,
                (source, handler) => source.ZoomChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.InputMethodServices.KeyboardView"/> class events.</summary>
    public static class KeyboardViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.Key"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.Key"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable KeyWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler<Android.InputMethodServices.KeyboardView.KeyEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView, Android.InputMethodServices.KeyboardView.KeyEventArgs>(
                eventSource,
                (source, handler) => source.Key += handler,
                (source, handler) => source.Key -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.Press"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.Press"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PressWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler<Android.InputMethodServices.KeyboardView.PressEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView, Android.InputMethodServices.KeyboardView.PressEventArgs>(
                eventSource,
                (source, handler) => source.Press += handler,
                (source, handler) => source.Press -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.Release"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.Release"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ReleaseWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler<Android.InputMethodServices.KeyboardView.ReleaseEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView, Android.InputMethodServices.KeyboardView.ReleaseEventArgs>(
                eventSource,
                (source, handler) => source.Release += handler,
                (source, handler) => source.Release -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.SwipeDownEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.SwipeDownEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SwipeDownEventWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView>(
                eventSource,
                (source, handler) => source.SwipeDownEvent += handler,
                (source, handler) => source.SwipeDownEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.SwipeLeftEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.SwipeLeftEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SwipeLeftEventWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView>(
                eventSource,
                (source, handler) => source.SwipeLeftEvent += handler,
                (source, handler) => source.SwipeLeftEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.SwipeRightEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.SwipeRightEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SwipeRightEventWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView>(
                eventSource,
                (source, handler) => source.SwipeRightEvent += handler,
                (source, handler) => source.SwipeRightEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.SwipeUpEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.SwipeUpEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SwipeUpEventWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView>(
                eventSource,
                (source, handler) => source.SwipeUpEvent += handler,
                (source, handler) => source.SwipeUpEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.InputMethodServices.KeyboardView.Text"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.InputMethodServices.KeyboardView.Text"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TextWeakSubscribe(
            this Android.InputMethodServices.KeyboardView eventSource,
            EventHandler<Android.InputMethodServices.KeyboardView.TextEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.InputMethodServices.KeyboardView, Android.InputMethodServices.KeyboardView.TextEventArgs>(
                eventSource,
                (source, handler) => source.Text += handler,
                (source, handler) => source.Text -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.AudioEffect"/> class events.</summary>
    public static class AudioEffectWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.AudioEffect.ControlStatus"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.AudioEffect.ControlStatus"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ControlStatusWeakSubscribe(
            this Android.Media.Audiofx.AudioEffect eventSource,
            EventHandler<Android.Media.Audiofx.AudioEffect.ControlStatusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.AudioEffect, Android.Media.Audiofx.AudioEffect.ControlStatusChangeEventArgs>(
                eventSource,
                (source, handler) => source.ControlStatus += handler,
                (source, handler) => source.ControlStatus -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.AudioEffect.EnableStatus"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.AudioEffect.EnableStatus"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EnableStatusWeakSubscribe(
            this Android.Media.Audiofx.AudioEffect eventSource,
            EventHandler<Android.Media.Audiofx.AudioEffect.EnableStatusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.AudioEffect, Android.Media.Audiofx.AudioEffect.EnableStatusChangeEventArgs>(
                eventSource,
                (source, handler) => source.EnableStatus += handler,
                (source, handler) => source.EnableStatus -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.BassBoost"/> class events.</summary>
    public static class BassBoostWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.BassBoost.Parameter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.BassBoost.Parameter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ParameterWeakSubscribe(
            this Android.Media.Audiofx.BassBoost eventSource,
            EventHandler<Android.Media.Audiofx.BassBoost.ParameterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.BassBoost, Android.Media.Audiofx.BassBoost.ParameterChangeEventArgs>(
                eventSource,
                (source, handler) => source.Parameter += handler,
                (source, handler) => source.Parameter -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.EnvironmentalReverb"/> class events.</summary>
    public static class EnvironmentalReverbWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.EnvironmentalReverb.Parameter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.EnvironmentalReverb.Parameter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ParameterWeakSubscribe(
            this Android.Media.Audiofx.EnvironmentalReverb eventSource,
            EventHandler<Android.Media.Audiofx.EnvironmentalReverb.ParameterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.EnvironmentalReverb, Android.Media.Audiofx.EnvironmentalReverb.ParameterChangeEventArgs>(
                eventSource,
                (source, handler) => source.Parameter += handler,
                (source, handler) => source.Parameter -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.Equalizer"/> class events.</summary>
    public static class EqualizerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.Equalizer.Parameter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.Equalizer.Parameter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ParameterWeakSubscribe(
            this Android.Media.Audiofx.Equalizer eventSource,
            EventHandler<Android.Media.Audiofx.Equalizer.ParameterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.Equalizer, Android.Media.Audiofx.Equalizer.ParameterChangeEventArgs>(
                eventSource,
                (source, handler) => source.Parameter += handler,
                (source, handler) => source.Parameter -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.PresetReverb"/> class events.</summary>
    public static class PresetReverbWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.PresetReverb.Parameter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.PresetReverb.Parameter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ParameterWeakSubscribe(
            this Android.Media.Audiofx.PresetReverb eventSource,
            EventHandler<Android.Media.Audiofx.PresetReverb.ParameterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.PresetReverb, Android.Media.Audiofx.PresetReverb.ParameterChangeEventArgs>(
                eventSource,
                (source, handler) => source.Parameter += handler,
                (source, handler) => source.Parameter -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Audiofx.Virtualizer"/> class events.</summary>
    public static class VirtualizerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Audiofx.Virtualizer.Parameter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Audiofx.Virtualizer.Parameter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ParameterWeakSubscribe(
            this Android.Media.Audiofx.Virtualizer eventSource,
            EventHandler<Android.Media.Audiofx.Virtualizer.ParameterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Audiofx.Virtualizer, Android.Media.Audiofx.Virtualizer.ParameterChangeEventArgs>(
                eventSource,
                (source, handler) => source.Parameter += handler,
                (source, handler) => source.Parameter -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.AudioRecord"/> class events.</summary>
    public static class AudioRecordWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.AudioRecord.MarkerReached"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.AudioRecord.MarkerReached"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MarkerReachedWeakSubscribe(
            this Android.Media.AudioRecord eventSource,
            EventHandler<Android.Media.AudioRecord.MarkerReachedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.AudioRecord, Android.Media.AudioRecord.MarkerReachedEventArgs>(
                eventSource,
                (source, handler) => source.MarkerReached += handler,
                (source, handler) => source.MarkerReached -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.AudioRecord.PeriodicNotification"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.AudioRecord.PeriodicNotification"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PeriodicNotificationWeakSubscribe(
            this Android.Media.AudioRecord eventSource,
            EventHandler<Android.Media.AudioRecord.PeriodicNotificationEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.AudioRecord, Android.Media.AudioRecord.PeriodicNotificationEventArgs>(
                eventSource,
                (source, handler) => source.PeriodicNotification += handler,
                (source, handler) => source.PeriodicNotification -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.AudioTrack"/> class events.</summary>
    public static class AudioTrackWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.AudioTrack.MarkerReached"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.AudioTrack.MarkerReached"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MarkerReachedWeakSubscribe(
            this Android.Media.AudioTrack eventSource,
            EventHandler<Android.Media.AudioTrack.MarkerReachedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.AudioTrack, Android.Media.AudioTrack.MarkerReachedEventArgs>(
                eventSource,
                (source, handler) => source.MarkerReached += handler,
                (source, handler) => source.MarkerReached -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.AudioTrack.PeriodicNotification"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.AudioTrack.PeriodicNotification"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PeriodicNotificationWeakSubscribe(
            this Android.Media.AudioTrack eventSource,
            EventHandler<Android.Media.AudioTrack.PeriodicNotificationEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.AudioTrack, Android.Media.AudioTrack.PeriodicNotificationEventArgs>(
                eventSource,
                (source, handler) => source.PeriodicNotification += handler,
                (source, handler) => source.PeriodicNotification -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.Effect.Effect"/> class events.</summary>
    public static class EffectWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.Effect.Effect.Update"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.Effect.Effect.Update"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable UpdateWeakSubscribe(
            this Android.Media.Effect.Effect eventSource,
            EventHandler<Android.Media.Effect.EffectUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.Effect.Effect, Android.Media.Effect.EffectUpdateEventArgs>(
                eventSource,
                (source, handler) => source.Update += handler,
                (source, handler) => source.Update -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.JetPlayer"/> class events.</summary>
    public static class JetPlayerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.JetPlayer.JetEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.JetPlayer.JetEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable JetEventWeakSubscribe(
            this Android.Media.JetPlayer eventSource,
            EventHandler<Android.Media.JetPlayer.JetEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.JetPlayer, Android.Media.JetPlayer.JetEventEventArgs>(
                eventSource,
                (source, handler) => source.JetEvent += handler,
                (source, handler) => source.JetEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.JetPlayer.JetNumQueuedSegmentUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.JetPlayer.JetNumQueuedSegmentUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable JetNumQueuedSegmentUpdateWeakSubscribe(
            this Android.Media.JetPlayer eventSource,
            EventHandler<Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.JetPlayer, Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs>(
                eventSource,
                (source, handler) => source.JetNumQueuedSegmentUpdate += handler,
                (source, handler) => source.JetNumQueuedSegmentUpdate -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.JetPlayer.JetPauseUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.JetPlayer.JetPauseUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable JetPauseUpdateWeakSubscribe(
            this Android.Media.JetPlayer eventSource,
            EventHandler<Android.Media.JetPlayer.JetPauseUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.JetPlayer, Android.Media.JetPlayer.JetPauseUpdateEventArgs>(
                eventSource,
                (source, handler) => source.JetPauseUpdate += handler,
                (source, handler) => source.JetPauseUpdate -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.JetPlayer.JetUserIdUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.JetPlayer.JetUserIdUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable JetUserIdUpdateWeakSubscribe(
            this Android.Media.JetPlayer eventSource,
            EventHandler<Android.Media.JetPlayer.JetUserIdUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.JetPlayer, Android.Media.JetPlayer.JetUserIdUpdateEventArgs>(
                eventSource,
                (source, handler) => source.JetUserIdUpdate += handler,
                (source, handler) => source.JetUserIdUpdate -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.MediaDrm"/> class events.</summary>
    public static class MediaDrmWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.MediaDrm.MediaDrmEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaDrm.MediaDrmEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MediaDrmEventWeakSubscribe(
            this Android.Media.MediaDrm eventSource,
            EventHandler<Android.Media.MediaDrm.MediaDrmEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaDrm, Android.Media.MediaDrm.MediaDrmEventArgs>(
                eventSource,
                (source, handler) => source.MediaDrmEvent += handler,
                (source, handler) => source.MediaDrmEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.MediaPlayer"/> class events.</summary>
    public static class MediaPlayerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.BufferingUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.BufferingUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BufferingUpdateWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.BufferingUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.BufferingUpdateEventArgs>(
                eventSource,
                (source, handler) => source.BufferingUpdate += handler,
                (source, handler) => source.BufferingUpdate -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.Completion"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.Completion"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CompletionWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer>(
                eventSource,
                (source, handler) => source.Completion += handler,
                (source, handler) => source.Completion -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.DrmInfoEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.DrmInfoEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrmInfoEventWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.DrmInfoEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.DrmInfoEventArgs>(
                eventSource,
                (source, handler) => source.DrmInfoEvent += handler,
                (source, handler) => source.DrmInfoEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.DrmPrepared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.DrmPrepared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrmPreparedWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.DrmPreparedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.DrmPreparedEventArgs>(
                eventSource,
                (source, handler) => source.DrmPrepared += handler,
                (source, handler) => source.DrmPrepared -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.Error"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.Error"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ErrorWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.ErrorEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.ErrorEventArgs>(
                eventSource,
                (source, handler) => source.Error += handler,
                (source, handler) => source.Error -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.Info"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.Info"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InfoWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.InfoEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.InfoEventArgs>(
                eventSource,
                (source, handler) => source.Info += handler,
                (source, handler) => source.Info -= handler,
                eventHandler);
        }

#if __ANDROID_28__
        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.MediaTimeDiscontinuity"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.MediaTimeDiscontinuity"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MediaTimeDiscontinuityWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.MediaTimeDiscontinuityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.MediaTimeDiscontinuityEventArgs>(
                eventSource,
                (source, handler) => source.MediaTimeDiscontinuity += handler,
                (source, handler) => source.MediaTimeDiscontinuity -= handler,
                eventHandler);
        }
#endif

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.Prepared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.Prepared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreparedWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer>(
                eventSource,
                (source, handler) => source.Prepared += handler,
                (source, handler) => source.Prepared -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.SeekComplete"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.SeekComplete"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SeekCompleteWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer>(
                eventSource,
                (source, handler) => source.SeekComplete += handler,
                (source, handler) => source.SeekComplete -= handler,
                eventHandler);
        }

#if __ANDROID_28__
        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.SubtitleData"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.SubtitleData"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SubtitleDataWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.SubtitleDataEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.SubtitleDataEventArgs>(
                eventSource,
                (source, handler) => source.SubtitleData += handler,
                (source, handler) => source.SubtitleData -= handler,
                eventHandler);
        }
#endif

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.TimedMetaDataAvailable"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.TimedMetaDataAvailable"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TimedMetaDataAvailableWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs>(
                eventSource,
                (source, handler) => source.TimedMetaDataAvailable += handler,
                (source, handler) => source.TimedMetaDataAvailable -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.TimedText"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.TimedText"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TimedTextWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.TimedTextEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.TimedTextEventArgs>(
                eventSource,
                (source, handler) => source.TimedText += handler,
                (source, handler) => source.TimedText -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaPlayer.VideoSizeChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaPlayer.VideoSizeChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable VideoSizeChangedWeakSubscribe(
            this Android.Media.MediaPlayer eventSource,
            EventHandler<Android.Media.MediaPlayer.VideoSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaPlayer, Android.Media.MediaPlayer.VideoSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.VideoSizeChanged += handler,
                (source, handler) => source.VideoSizeChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.MediaRecorder"/> class events.</summary>
    public static class MediaRecorderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.MediaRecorder.Error"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaRecorder.Error"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ErrorWeakSubscribe(
            this Android.Media.MediaRecorder eventSource,
            EventHandler<Android.Media.MediaRecorder.ErrorEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaRecorder, Android.Media.MediaRecorder.ErrorEventArgs>(
                eventSource,
                (source, handler) => source.Error += handler,
                (source, handler) => source.Error -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.MediaRecorder.Info"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.MediaRecorder.Info"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InfoWeakSubscribe(
            this Android.Media.MediaRecorder eventSource,
            EventHandler<Android.Media.MediaRecorder.InfoEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.MediaRecorder, Android.Media.MediaRecorder.InfoEventArgs>(
                eventSource,
                (source, handler) => source.Info += handler,
                (source, handler) => source.Info -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.RemoteControlClient"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class RemoteControlClientWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.RemoteControlClient.MetadataUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.RemoteControlClient.MetadataUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MetadataUpdateWeakSubscribe(
            this Android.Media.RemoteControlClient eventSource,
            EventHandler<Android.Media.RemoteControlClient.MetadataUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.RemoteControlClient, Android.Media.RemoteControlClient.MetadataUpdateEventArgs>(
                eventSource,
                (source, handler) => source.MetadataUpdate += handler,
                (source, handler) => source.MetadataUpdate -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Media.RemoteControlClient.PlaybackPositionUpdate"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.RemoteControlClient.PlaybackPositionUpdate"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PlaybackPositionUpdateWeakSubscribe(
            this Android.Media.RemoteControlClient eventSource,
            EventHandler<Android.Media.RemoteControlClient.PlaybackPositionUpdateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.RemoteControlClient, Android.Media.RemoteControlClient.PlaybackPositionUpdateEventArgs>(
                eventSource,
                (source, handler) => source.PlaybackPositionUpdate += handler,
                (source, handler) => source.PlaybackPositionUpdate -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.SoundPool"/> class events.</summary>
    public static class SoundPoolWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.SoundPool.LoadComplete"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.SoundPool.LoadComplete"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable LoadCompleteWeakSubscribe(
            this Android.Media.SoundPool eventSource,
            EventHandler<Android.Media.SoundPool.LoadCompleteEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.SoundPool, Android.Media.SoundPool.LoadCompleteEventArgs>(
                eventSource,
                (source, handler) => source.LoadComplete += handler,
                (source, handler) => source.LoadComplete -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Media.TV.TvView"/> class events.</summary>
    public static class TvViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Media.TV.TvView.UnhandledInputEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Media.TV.TvView.UnhandledInputEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable UnhandledInputEventWeakSubscribe(
            this Android.Media.TV.TvView eventSource,
            EventHandler<Android.Media.TV.TvView.UnhandledInputEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Media.TV.TvView, Android.Media.TV.TvView.UnhandledInputEventEventArgs>(
                eventSource,
                (source, handler) => source.UnhandledInputEvent += handler,
                (source, handler) => source.UnhandledInputEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Net.ConnectivityManager"/> class events.</summary>
    public static class ConnectivityManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Net.ConnectivityManager.DefaultNetworkActive"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Net.ConnectivityManager.DefaultNetworkActive"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DefaultNetworkActiveWeakSubscribe(
            this Android.Net.ConnectivityManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Net.ConnectivityManager>(
                eventSource,
                (source, handler) => source.DefaultNetworkActive += handler,
                (source, handler) => source.DefaultNetworkActive -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.OS.CancellationSignal"/> class events.</summary>
    public static class CancellationSignalWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.OS.CancellationSignal.CancelEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.OS.CancellationSignal.CancelEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CancelEventWeakSubscribe(
            this Android.OS.CancellationSignal eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.OS.CancellationSignal>(
                eventSource,
                (source, handler) => source.CancelEvent += handler,
                (source, handler) => source.CancelEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Preferences.Preference"/> class events.</summary>
    public static class PreferenceWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Preferences.Preference.PreferenceChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Preferences.Preference.PreferenceChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreferenceChangeWeakSubscribe(
            this Android.Preferences.Preference eventSource,
            EventHandler<Android.Preferences.Preference.PreferenceChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Preferences.Preference, Android.Preferences.Preference.PreferenceChangeEventArgs>(
                eventSource,
                (source, handler) => source.PreferenceChange += handler,
                (source, handler) => source.PreferenceChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Preferences.Preference.PreferenceClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Preferences.Preference.PreferenceClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreferenceClickWeakSubscribe(
            this Android.Preferences.Preference eventSource,
            EventHandler<Android.Preferences.Preference.PreferenceClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Preferences.Preference, Android.Preferences.Preference.PreferenceClickEventArgs>(
                eventSource,
                (source, handler) => source.PreferenceClick += handler,
                (source, handler) => source.PreferenceClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Renderscripts.Allocation"/> class events.</summary>
    public static class AllocationWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Renderscripts.Allocation.BufferAvailable"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Renderscripts.Allocation.BufferAvailable"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BufferAvailableWeakSubscribe(
            this Android.Renderscripts.Allocation eventSource,
            EventHandler<Android.Renderscripts.Allocation.BufferAvailableEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Renderscripts.Allocation, Android.Renderscripts.Allocation.BufferAvailableEventArgs>(
                eventSource,
                (source, handler) => source.BufferAvailable += handler,
                (source, handler) => source.BufferAvailable -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Sax.Element"/> class events.</summary>
    public static class ElementWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Sax.Element.EndElement"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Sax.Element.EndElement"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EndElementWeakSubscribe(
            this Android.Sax.Element eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Sax.Element>(
                eventSource,
                (source, handler) => source.EndElement += handler,
                (source, handler) => source.EndElement -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Sax.Element.EndTextElement"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Sax.Element.EndTextElement"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EndTextElementWeakSubscribe(
            this Android.Sax.Element eventSource,
            EventHandler<Android.Sax.EndTextElementEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Sax.Element, Android.Sax.EndTextElementEventArgs>(
                eventSource,
                (source, handler) => source.EndTextElement += handler,
                (source, handler) => source.EndTextElement -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Sax.Element.StartElement"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Sax.Element.StartElement"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable StartElementWeakSubscribe(
            this Android.Sax.Element eventSource,
            EventHandler<Android.Sax.StartElementEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Sax.Element, Android.Sax.StartElementEventArgs>(
                eventSource,
                (source, handler) => source.StartElement += handler,
                (source, handler) => source.StartElement -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Speech.SpeechRecognizer"/> class events.</summary>
    public static class SpeechRecognizerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.BeginningOfSpeech"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.BeginningOfSpeech"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BeginningOfSpeechWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer>(
                eventSource,
                (source, handler) => source.BeginningOfSpeech += handler,
                (source, handler) => source.BeginningOfSpeech -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.BufferReceived"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.BufferReceived"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BufferReceivedWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.BufferReceivedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.BufferReceivedEventArgs>(
                eventSource,
                (source, handler) => source.BufferReceived += handler,
                (source, handler) => source.BufferReceived -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.EndOfSpeech"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.EndOfSpeech"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EndOfSpeechWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer>(
                eventSource,
                (source, handler) => source.EndOfSpeech += handler,
                (source, handler) => source.EndOfSpeech -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.Error"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.Error"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ErrorWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.ErrorEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.ErrorEventArgs>(
                eventSource,
                (source, handler) => source.Error += handler,
                (source, handler) => source.Error -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.Event"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.Event"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EventWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.EventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.EventEventArgs>(
                eventSource,
                (source, handler) => source.Event += handler,
                (source, handler) => source.Event -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.PartialResults"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.PartialResults"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PartialResultsWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.PartialResultsEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.PartialResultsEventArgs>(
                eventSource,
                (source, handler) => source.PartialResults += handler,
                (source, handler) => source.PartialResults -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.ReadyForSpeech"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.ReadyForSpeech"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ReadyForSpeechWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.ReadyForSpeechEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.ReadyForSpeechEventArgs>(
                eventSource,
                (source, handler) => source.ReadyForSpeech += handler,
                (source, handler) => source.ReadyForSpeech -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.Results"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.Results"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ResultsWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.ResultsEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.ResultsEventArgs>(
                eventSource,
                (source, handler) => source.Results += handler,
                (source, handler) => source.Results -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Speech.SpeechRecognizer.RmsChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Speech.SpeechRecognizer.RmsChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RmsChangedWeakSubscribe(
            this Android.Speech.SpeechRecognizer eventSource,
            EventHandler<Android.Speech.RmsChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Speech.SpeechRecognizer, Android.Speech.RmsChangedEventArgs>(
                eventSource,
                (source, handler) => source.RmsChanged += handler,
                (source, handler) => source.RmsChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="AppBarLayout"/> class events.</summary>
    public static class AppBarLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="AppBarLayout.OffsetChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="AppBarLayout.OffsetChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable OffsetChangedWeakSubscribe(
            this AppBarLayout eventSource,
            EventHandler<AppBarLayout.OffsetChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<AppBarLayout, AppBarLayout.OffsetChangedEventArgs>(
                eventSource,
                (source, handler) => source.OffsetChanged += handler,
                (source, handler) => source.OffsetChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="BottomNavigationView"/> class events.</summary>
    public static class BottomNavigationViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="BottomNavigationView.NavigationItemReselected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="BottomNavigationView.NavigationItemReselected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NavigationItemReselectedWeakSubscribe(
            this BottomNavigationView eventSource,
            EventHandler<BottomNavigationView.NavigationItemReselectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<BottomNavigationView, BottomNavigationView.NavigationItemReselectedEventArgs>(
                eventSource,
                (source, handler) => source.NavigationItemReselected += handler,
                (source, handler) => source.NavigationItemReselected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="BottomNavigationView.NavigationItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="BottomNavigationView.NavigationItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NavigationItemSelectedWeakSubscribe(
            this BottomNavigationView eventSource,
            EventHandler<BottomNavigationView.NavigationItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<BottomNavigationView, BottomNavigationView.NavigationItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NavigationItemSelected += handler,
                (source, handler) => source.NavigationItemSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="NavigationView"/> class events.</summary>
    public static class NavigationViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="NavigationView.NavigationItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="NavigationView.NavigationItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NavigationItemSelectedWeakSubscribe(
            this NavigationView eventSource,
            EventHandler<NavigationView.NavigationItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<NavigationView, NavigationView.NavigationItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NavigationItemSelected += handler,
                (source, handler) => source.NavigationItemSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="TabLayout"/> class events.</summary>
    public static class TabLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="TabLayout.TabReselected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="TabLayout.TabReselected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabReselectedWeakSubscribe(
            this TabLayout eventSource,
            EventHandler<TabLayout.TabReselectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<TabLayout, TabLayout.TabReselectedEventArgs>(
                eventSource,
                (source, handler) => source.TabReselected += handler,
                (source, handler) => source.TabReselected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="TabLayout.TabSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="TabLayout.TabSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabSelectedWeakSubscribe(
            this TabLayout eventSource,
            EventHandler<TabLayout.TabSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<TabLayout, TabLayout.TabSelectedEventArgs>(
                eventSource,
                (source, handler) => source.TabSelected += handler,
                (source, handler) => source.TabSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="TabLayout.TabUnselected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="TabLayout.TabUnselected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabUnselectedWeakSubscribe(
            this TabLayout eventSource,
            EventHandler<TabLayout.TabUnselectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<TabLayout, TabLayout.TabUnselectedEventArgs>(
                eventSource,
                (source, handler) => source.TabUnselected += handler,
                (source, handler) => source.TabUnselected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="FragmentManager"/> class events.</summary>
    public static class SupportFragmentManagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="FragmentManager.BackStackChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="FragmentManager.BackStackChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BackStackChangedWeakSubscribe(
            this FragmentManager eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<FragmentManager>(
                eventSource,
                (source, handler) => source.BackStackChanged += handler,
                (source, handler) => source.BackStackChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="CancellationSignal"/> class events.</summary>
    public static class SupportCancellationSignalWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="CancellationSignal.CancelEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="CancellationSignal.CancelEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CancelEventWeakSubscribe(
            this CancellationSignal eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<CancellationSignal>(
                eventSource,
                (source, handler) => source.CancelEvent += handler,
                (source, handler) => source.CancelEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ActionProvider"/> class events.</summary>
    public static class SupportActionProviderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ActionProvider.SubUiVisibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ActionProvider.SubUiVisibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SubUiVisibilityWeakSubscribe(
            this ActionProvider eventSource,
            EventHandler<ActionProvider.SubUiVisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ActionProvider, ActionProvider.SubUiVisibilityEventArgs>(
                eventSource,
                (source, handler) => source.SubUiVisibility += handler,
                (source, handler) => source.SubUiVisibility -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="ActionProvider.Visibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ActionProvider.Visibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable VisibilityWeakSubscribe(
            this ActionProvider eventSource,
            EventHandler<ActionProvider.VisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ActionProvider, ActionProvider.VisibilityEventArgs>(
                eventSource,
                (source, handler) => source.Visibility += handler,
                (source, handler) => source.Visibility -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ViewPager"/> class events.</summary>
    public static class ViewPagerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ViewPager.AdapterChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ViewPager.AdapterChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AdapterChangeWeakSubscribe(
            this ViewPager eventSource,
            EventHandler<ViewPager.AdapterChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ViewPager, ViewPager.AdapterChangeEventArgs>(
                eventSource,
                (source, handler) => source.AdapterChange += handler,
                (source, handler) => source.AdapterChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="ViewPager.PageScrolled"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ViewPager.PageScrolled"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PageScrolledWeakSubscribe(
            this ViewPager eventSource,
            EventHandler<ViewPager.PageScrolledEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ViewPager, ViewPager.PageScrolledEventArgs>(
                eventSource,
                (source, handler) => source.PageScrolled += handler,
                (source, handler) => source.PageScrolled -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="ViewPager.PageScrollStateChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ViewPager.PageScrollStateChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PageScrollStateChangedWeakSubscribe(
            this ViewPager eventSource,
            EventHandler<ViewPager.PageScrollStateChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ViewPager, ViewPager.PageScrollStateChangedEventArgs>(
                eventSource,
                (source, handler) => source.PageScrollStateChanged += handler,
                (source, handler) => source.PageScrollStateChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="ViewPager.PageSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ViewPager.PageSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PageSelectedWeakSubscribe(
            this ViewPager eventSource,
            EventHandler<ViewPager.PageSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ViewPager, ViewPager.PageSelectedEventArgs>(
                eventSource,
                (source, handler) => source.PageSelected += handler,
                (source, handler) => source.PageSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="DrawerLayout"/> class events.</summary>
    public static class DrawerLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="DrawerLayout.DrawerClosed"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="DrawerLayout.DrawerClosed"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerClosedWeakSubscribe(
            this DrawerLayout eventSource,
            EventHandler<DrawerLayout.DrawerClosedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<DrawerLayout, DrawerLayout.DrawerClosedEventArgs>(
                eventSource,
                (source, handler) => source.DrawerClosed += handler,
                (source, handler) => source.DrawerClosed -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="DrawerLayout.DrawerOpened"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="DrawerLayout.DrawerOpened"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerOpenedWeakSubscribe(
            this DrawerLayout eventSource,
            EventHandler<DrawerLayout.DrawerOpenedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<DrawerLayout, DrawerLayout.DrawerOpenedEventArgs>(
                eventSource,
                (source, handler) => source.DrawerOpened += handler,
                (source, handler) => source.DrawerOpened -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="DrawerLayout.DrawerSlide"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="DrawerLayout.DrawerSlide"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerSlideWeakSubscribe(
            this DrawerLayout eventSource,
            EventHandler<DrawerLayout.DrawerSlideEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<DrawerLayout, DrawerLayout.DrawerSlideEventArgs>(
                eventSource,
                (source, handler) => source.DrawerSlide += handler,
                (source, handler) => source.DrawerSlide -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="DrawerLayout.DrawerStateChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="DrawerLayout.DrawerStateChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerStateChangedWeakSubscribe(
            this DrawerLayout eventSource,
            EventHandler<DrawerLayout.DrawerStateChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<DrawerLayout, DrawerLayout.DrawerStateChangedEventArgs>(
                eventSource,
                (source, handler) => source.DrawerStateChanged += handler,
                (source, handler) => source.DrawerStateChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="NestedScrollView"/> class events.</summary>
    public static class NestedScrollViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="NestedScrollView.ScrollChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="NestedScrollView.ScrollChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollChangeWeakSubscribe(
            this NestedScrollView eventSource,
            EventHandler<NestedScrollView.ScrollChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<NestedScrollView, NestedScrollView.ScrollChangeEventArgs>(
                eventSource,
                (source, handler) => source.ScrollChange += handler,
                (source, handler) => source.ScrollChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="SlidingPaneLayout"/> class events.</summary>
    public static class SlidingPaneLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="SlidingPaneLayout.PanelClosed"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SlidingPaneLayout.PanelClosed"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PanelClosedWeakSubscribe(
            this SlidingPaneLayout eventSource,
            EventHandler<SlidingPaneLayout.PanelClosedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SlidingPaneLayout, SlidingPaneLayout.PanelClosedEventArgs>(
                eventSource,
                (source, handler) => source.PanelClosed += handler,
                (source, handler) => source.PanelClosed -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SlidingPaneLayout.PanelOpened"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SlidingPaneLayout.PanelOpened"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PanelOpenedWeakSubscribe(
            this SlidingPaneLayout eventSource,
            EventHandler<SlidingPaneLayout.PanelOpenedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SlidingPaneLayout, SlidingPaneLayout.PanelOpenedEventArgs>(
                eventSource,
                (source, handler) => source.PanelOpened += handler,
                (source, handler) => source.PanelOpened -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SlidingPaneLayout.PanelSlide"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SlidingPaneLayout.PanelSlide"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PanelSlideWeakSubscribe(
            this SlidingPaneLayout eventSource,
            EventHandler<SlidingPaneLayout.PanelSlideEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SlidingPaneLayout, SlidingPaneLayout.PanelSlideEventArgs>(
                eventSource,
                (source, handler) => source.PanelSlide += handler,
                (source, handler) => source.PanelSlide -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="SwipeRefreshLayout"/> class events.</summary>
    public static class SwipeRefreshLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="SwipeRefreshLayout.Refresh"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SwipeRefreshLayout.Refresh"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RefreshWeakSubscribe(
            this SwipeRefreshLayout eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SwipeRefreshLayout>(
                eventSource,
                (source, handler) => source.Refresh += handler,
                (source, handler) => source.Refresh -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ActionBar"/> class events.</summary>
    public static class SupportActionBarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ActionBar.MenuVisibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ActionBar.MenuVisibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuVisibilityWeakSubscribe(
            this ActionBar eventSource,
            EventHandler<ActionBar.MenuVisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ActionBar, ActionBar.MenuVisibilityEventArgs>(
                eventSource,
                (source, handler) => source.MenuVisibility += handler,
                (source, handler) => source.MenuVisibility -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="WindowDecorActionBar"/> class events.</summary>
    public static class WindowDecorActionBarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="WindowDecorActionBar.MenuVisibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="WindowDecorActionBar.MenuVisibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuVisibilityWeakSubscribe(
            this WindowDecorActionBar eventSource,
            EventHandler<ActionBar.MenuVisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<WindowDecorActionBar, ActionBar.MenuVisibilityEventArgs>(
                eventSource,
                (source, handler) => source.MenuVisibility += handler,
                (source, handler) => source.MenuVisibility -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ActionMenuView"/> class events.</summary>
    public static class SupportActionMenuViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ActionMenuView.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ActionMenuView.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this ActionMenuView eventSource,
            EventHandler<ActionMenuView.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ActionMenuView, ActionMenuView.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ContentFrameLayout"/> class events.</summary>
    public static class ContentFrameLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ContentFrameLayout.AttachedFromWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ContentFrameLayout.AttachedFromWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AttachedFromWindowWeakSubscribe(
            this ContentFrameLayout eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ContentFrameLayout>(
                eventSource,
                (source, handler) => source.AttachedFromWindow += handler,
                (source, handler) => source.AttachedFromWindow -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="ContentFrameLayout.DetachedFromWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ContentFrameLayout.DetachedFromWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DetachedFromWindowWeakSubscribe(
            this ContentFrameLayout eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ContentFrameLayout>(
                eventSource,
                (source, handler) => source.DetachedFromWindow += handler,
                (source, handler) => source.DetachedFromWindow -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="FitWindowsFrameLayout"/> class events.</summary>
    public static class FitWindowsFrameLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="FitWindowsFrameLayout.FitSystemWindows"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="FitWindowsFrameLayout.FitSystemWindows"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FitSystemWindowsWeakSubscribe(
            this FitWindowsFrameLayout eventSource,
            EventHandler<FitWindowsViewGroupOnFitSystemWindowsEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<FitWindowsFrameLayout, FitWindowsViewGroupOnFitSystemWindowsEventArgs>(
                eventSource,
                (source, handler) => source.FitSystemWindows += handler,
                (source, handler) => source.FitSystemWindows -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="FitWindowsLinearLayout"/> class events.</summary>
    public static class FitWindowsLinearLayoutWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="FitWindowsLinearLayout.FitSystemWindows"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="FitWindowsLinearLayout.FitSystemWindows"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FitSystemWindowsWeakSubscribe(
            this FitWindowsLinearLayout eventSource,
            EventHandler<FitWindowsViewGroupOnFitSystemWindowsEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<FitWindowsLinearLayout, FitWindowsViewGroupOnFitSystemWindowsEventArgs>(
                eventSource,
                (source, handler) => source.FitSystemWindows += handler,
                (source, handler) => source.FitSystemWindows -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="MenuPopupWindow"/> class events.</summary>
    public static class MenuPopupWindowWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="MenuPopupWindow.ItemHoverEnter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="MenuPopupWindow.ItemHoverEnter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemHoverEnterWeakSubscribe(
            this MenuPopupWindow eventSource,
            EventHandler<ItemHoverEnterEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<MenuPopupWindow, ItemHoverEnterEventArgs>(
                eventSource,
                (source, handler) => source.ItemHoverEnter += handler,
                (source, handler) => source.ItemHoverEnter -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="MenuPopupWindow.ItemHoverExit"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="MenuPopupWindow.ItemHoverExit"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemHoverExitWeakSubscribe(
            this MenuPopupWindow eventSource,
            EventHandler<ItemHoverExitEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<MenuPopupWindow, ItemHoverExitEventArgs>(
                eventSource,
                (source, handler) => source.ItemHoverExit += handler,
                (source, handler) => source.ItemHoverExit -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="MenuPopupWindow.MenuDropDownListView"/> class events.</summary>
    public static class MenuDropDownListViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="MenuPopupWindow.MenuDropDownListView.ItemHoverEnter"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="MenuPopupWindow.MenuDropDownListView.ItemHoverEnter"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemHoverEnterWeakSubscribe(
            this MenuPopupWindow.MenuDropDownListView eventSource,
            EventHandler<ItemHoverEnterEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<MenuPopupWindow.MenuDropDownListView, ItemHoverEnterEventArgs>(
                eventSource,
                (source, handler) => source.ItemHoverEnter += handler,
                (source, handler) => source.ItemHoverEnter -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="MenuPopupWindow.MenuDropDownListView.ItemHoverExit"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="MenuPopupWindow.MenuDropDownListView.ItemHoverExit"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemHoverExitWeakSubscribe(
            this MenuPopupWindow.MenuDropDownListView eventSource,
            EventHandler<ItemHoverExitEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<MenuPopupWindow.MenuDropDownListView, ItemHoverExitEventArgs>(
                eventSource,
                (source, handler) => source.ItemHoverExit += handler,
                (source, handler) => source.ItemHoverExit -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="PopupMenu"/> class events.</summary>
    public static class SupportPopupMenuWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="PopupMenu.DismissEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="PopupMenu.DismissEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissEventWeakSubscribe(
            this PopupMenu eventSource,
            EventHandler<PopupMenu.DismissEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<PopupMenu, PopupMenu.DismissEventArgs>(
                eventSource,
                (source, handler) => source.DismissEvent += handler,
                (source, handler) => source.DismissEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="PopupMenu.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="PopupMenu.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this PopupMenu eventSource,
            EventHandler<PopupMenu.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<PopupMenu, PopupMenu.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="RecyclerView"/> class events.</summary>
    public static class RecyclerViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="RecyclerView.ChildViewAttachedToWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.ChildViewAttachedToWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChildViewAttachedToWindowWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.ChildViewAttachedToWindowEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.ChildViewAttachedToWindowEventArgs>(
                eventSource,
                (source, handler) => source.ChildViewAttachedToWindow += handler,
                (source, handler) => source.ChildViewAttachedToWindow -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="RecyclerView.ChildViewDetachedFromWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.ChildViewDetachedFromWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChildViewDetachedFromWindowWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.ChildViewDetachedFromWindowEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.ChildViewDetachedFromWindowEventArgs>(
                eventSource,
                (source, handler) => source.ChildViewDetachedFromWindow += handler,
                (source, handler) => source.ChildViewDetachedFromWindow -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="RecyclerView.InterceptTouchEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.InterceptTouchEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InterceptTouchEventWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.InterceptTouchEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.InterceptTouchEventEventArgs>(
                eventSource,
                (source, handler) => source.InterceptTouchEvent += handler,
                (source, handler) => source.InterceptTouchEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="RecyclerView.RecyclerEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.RecyclerEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RecyclerEventWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.RecyclerEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.RecyclerEventArgs>(
                eventSource,
                (source, handler) => source.RecyclerEvent += handler,
                (source, handler) => source.RecyclerEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="RecyclerView.RequestDisallowInterceptTouchEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.RequestDisallowInterceptTouchEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RequestDisallowInterceptTouchEventWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.RequestDisallowInterceptTouchEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.RequestDisallowInterceptTouchEventEventArgs>(
                eventSource,
                (source, handler) => source.RequestDisallowInterceptTouchEvent += handler,
                (source, handler) => source.RequestDisallowInterceptTouchEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="RecyclerView.TouchEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="RecyclerView.TouchEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TouchEventWeakSubscribe(
            this RecyclerView eventSource,
            EventHandler<RecyclerView.TouchEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<RecyclerView, RecyclerView.TouchEventEventArgs>(
                eventSource,
                (source, handler) => source.TouchEvent += handler,
                (source, handler) => source.TouchEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="SearchView"/> class events.</summary>
    public static class SupportSearchViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="SearchView.Close"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SearchView.Close"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CloseWeakSubscribe(
            this SearchView eventSource,
            EventHandler<SearchView.CloseEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SearchView, SearchView.CloseEventArgs>(
                eventSource,
                (source, handler) => source.Close += handler,
                (source, handler) => source.Close -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SearchView.QueryTextChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SearchView.QueryTextChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable QueryTextChangeWeakSubscribe(
            this SearchView eventSource,
            EventHandler<SearchView.QueryTextChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SearchView, SearchView.QueryTextChangeEventArgs>(
                eventSource,
                (source, handler) => source.QueryTextChange += handler,
                (source, handler) => source.QueryTextChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SearchView.QueryTextSubmit"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SearchView.QueryTextSubmit"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable QueryTextSubmitWeakSubscribe(
            this SearchView eventSource,
            EventHandler<SearchView.QueryTextSubmitEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SearchView, SearchView.QueryTextSubmitEventArgs>(
                eventSource,
                (source, handler) => source.QueryTextSubmit += handler,
                (source, handler) => source.QueryTextSubmit -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SearchView.SuggestionClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SearchView.SuggestionClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SuggestionClickWeakSubscribe(
            this SearchView eventSource,
            EventHandler<SearchView.SuggestionClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SearchView, SearchView.SuggestionClickEventArgs>(
                eventSource,
                (source, handler) => source.SuggestionClick += handler,
                (source, handler) => source.SuggestionClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="SearchView.SuggestionSelect"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="SearchView.SuggestionSelect"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SuggestionSelectWeakSubscribe(
            this SearchView eventSource,
            EventHandler<SearchView.SuggestionSelectEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<SearchView, SearchView.SuggestionSelectEventArgs>(
                eventSource,
                (source, handler) => source.SuggestionSelect += handler,
                (source, handler) => source.SuggestionSelect -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ShareActionProvider"/> class events.</summary>
    public static class SupportShareActionProviderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ShareActionProvider.ShareTargetSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ShareActionProvider.ShareTargetSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ShareTargetSelectedWeakSubscribe(
            this ShareActionProvider eventSource,
            EventHandler<ShareActionProvider.ShareTargetSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ShareActionProvider, ShareActionProvider.ShareTargetSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ShareTargetSelected += handler,
                (source, handler) => source.ShareTargetSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Toolbar"/> class events.</summary>
    public static class SupportToolbarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Toolbar.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Toolbar.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this Toolbar eventSource,
            EventHandler<Toolbar.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Toolbar, Toolbar.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Toolbar.NavigationClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Toolbar.NavigationClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NavigationClickWeakSubscribe(
            this Toolbar eventSource,
            EventHandler<Toolbar.NavigationClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Toolbar, Toolbar.NavigationClickEventArgs>(
                eventSource,
                (source, handler) => source.NavigationClick += handler,
                (source, handler) => source.NavigationClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="ViewStubCompat"/> class events.</summary>
    public static class ViewStubCompatWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="ViewStubCompat.InflateEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="ViewStubCompat.InflateEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InflateEventWeakSubscribe(
            this ViewStubCompat eventSource,
            EventHandler<ViewStubCompat.InflateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<ViewStubCompat, ViewStubCompat.InflateEventArgs>(
                eventSource,
                (source, handler) => source.InflateEvent += handler,
                (source, handler) => source.InflateEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.ActionProvider"/> class events.</summary>
    public static class ActionProviderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.ActionProvider.Visibility"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ActionProvider.Visibility"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable VisibilityWeakSubscribe(
            this Android.Views.ActionProvider eventSource,
            EventHandler<Android.Views.ActionProvider.VisibilityEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ActionProvider, Android.Views.ActionProvider.VisibilityEventArgs>(
                eventSource,
                (source, handler) => source.Visibility += handler,
                (source, handler) => source.Visibility -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.Animations.Animation"/> class events.</summary>
    public static class AnimationWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.Animations.Animation.AnimationEnd"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.Animations.Animation.AnimationEnd"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationEndWeakSubscribe(
            this Android.Views.Animations.Animation eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationEndEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.Animations.Animation, Android.Views.Animations.Animation.AnimationEndEventArgs>(
                eventSource,
                (source, handler) => source.AnimationEnd += handler,
                (source, handler) => source.AnimationEnd -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.Animations.Animation.AnimationRepeat"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.Animations.Animation.AnimationRepeat"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationRepeatWeakSubscribe(
            this Android.Views.Animations.Animation eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationRepeatEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.Animations.Animation, Android.Views.Animations.Animation.AnimationRepeatEventArgs>(
                eventSource,
                (source, handler) => source.AnimationRepeat += handler,
                (source, handler) => source.AnimationRepeat -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.Animations.Animation.AnimationStart"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.Animations.Animation.AnimationStart"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationStartWeakSubscribe(
            this Android.Views.Animations.Animation eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationStartEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.Animations.Animation, Android.Views.Animations.Animation.AnimationStartEventArgs>(
                eventSource,
                (source, handler) => source.AnimationStart += handler,
                (source, handler) => source.AnimationStart -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.GestureDetector"/> class events.</summary>
    public static class GestureDetectorWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.GestureDetector.ContextClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.GestureDetector.ContextClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ContextClickWeakSubscribe(
            this Android.Views.GestureDetector eventSource,
            EventHandler<Android.Views.GestureDetector.ContextClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.GestureDetector, Android.Views.GestureDetector.ContextClickEventArgs>(
                eventSource,
                (source, handler) => source.ContextClick += handler,
                (source, handler) => source.ContextClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.GestureDetector.DoubleTap"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.GestureDetector.DoubleTap"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DoubleTapWeakSubscribe(
            this Android.Views.GestureDetector eventSource,
            EventHandler<Android.Views.GestureDetector.DoubleTapEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.GestureDetector, Android.Views.GestureDetector.DoubleTapEventArgs>(
                eventSource,
                (source, handler) => source.DoubleTap += handler,
                (source, handler) => source.DoubleTap -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.GestureDetector.DoubleTapEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.GestureDetector.DoubleTapEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DoubleTapEventWeakSubscribe(
            this Android.Views.GestureDetector eventSource,
            EventHandler<Android.Views.GestureDetector.DoubleTapEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.GestureDetector, Android.Views.GestureDetector.DoubleTapEventEventArgs>(
                eventSource,
                (source, handler) => source.DoubleTapEvent += handler,
                (source, handler) => source.DoubleTapEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.GestureDetector.SingleTapConfirmed"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.GestureDetector.SingleTapConfirmed"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SingleTapConfirmedWeakSubscribe(
            this Android.Views.GestureDetector eventSource,
            EventHandler<Android.Views.GestureDetector.SingleTapConfirmedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.GestureDetector, Android.Views.GestureDetector.SingleTapConfirmedEventArgs>(
                eventSource,
                (source, handler) => source.SingleTapConfirmed += handler,
                (source, handler) => source.SingleTapConfirmed -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.TextureView"/> class events.</summary>
    public static class TextureViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.TextureView.SurfaceTextureAvailable"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.TextureView.SurfaceTextureAvailable"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SurfaceTextureAvailableWeakSubscribe(
            this Android.Views.TextureView eventSource,
            EventHandler<Android.Views.TextureView.SurfaceTextureAvailableEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.TextureView, Android.Views.TextureView.SurfaceTextureAvailableEventArgs>(
                eventSource,
                (source, handler) => source.SurfaceTextureAvailable += handler,
                (source, handler) => source.SurfaceTextureAvailable -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.TextureView.SurfaceTextureDestroyed"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.TextureView.SurfaceTextureDestroyed"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SurfaceTextureDestroyedWeakSubscribe(
            this Android.Views.TextureView eventSource,
            EventHandler<Android.Views.TextureView.SurfaceTextureDestroyedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.TextureView, Android.Views.TextureView.SurfaceTextureDestroyedEventArgs>(
                eventSource,
                (source, handler) => source.SurfaceTextureDestroyed += handler,
                (source, handler) => source.SurfaceTextureDestroyed -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.TextureView.SurfaceTextureSizeChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.TextureView.SurfaceTextureSizeChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SurfaceTextureSizeChangedWeakSubscribe(
            this Android.Views.TextureView eventSource,
            EventHandler<Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.TextureView, Android.Views.TextureView.SurfaceTextureSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.SurfaceTextureSizeChanged += handler,
                (source, handler) => source.SurfaceTextureSizeChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.TextureView.SurfaceTextureUpdated"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.TextureView.SurfaceTextureUpdated"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SurfaceTextureUpdatedWeakSubscribe(
            this Android.Views.TextureView eventSource,
            EventHandler<Android.Views.TextureView.SurfaceTextureUpdatedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.TextureView, Android.Views.TextureView.SurfaceTextureUpdatedEventArgs>(
                eventSource,
                (source, handler) => source.SurfaceTextureUpdated += handler,
                (source, handler) => source.SurfaceTextureUpdated -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.View"/> class events.</summary>
    public static class ViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.View.CapturedPointer"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.CapturedPointer"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CapturedPointerWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.CapturedPointerEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.CapturedPointerEventArgs>(
                eventSource,
                (source, handler) => source.CapturedPointer += handler,
                (source, handler) => source.CapturedPointer -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.Click"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.Click"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ClickWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View>(
                eventSource,
                (source, handler) => source.Click += handler,
                (source, handler) => source.Click -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.ContextClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.ContextClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ContextClickWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.ContextClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.ContextClickEventArgs>(
                eventSource,
                (source, handler) => source.ContextClick += handler,
                (source, handler) => source.ContextClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.ContextMenuCreated"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.ContextMenuCreated"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ContextMenuCreatedWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.CreateContextMenuEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.CreateContextMenuEventArgs>(
                eventSource,
                (source, handler) => source.ContextMenuCreated += handler,
                (source, handler) => source.ContextMenuCreated -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.Drag"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.Drag"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DragWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.DragEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.DragEventArgs>(
                eventSource,
                (source, handler) => source.Drag += handler,
                (source, handler) => source.Drag -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.FocusChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.FocusChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FocusChangeWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.FocusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.FocusChangeEventArgs>(
                eventSource,
                (source, handler) => source.FocusChange += handler,
                (source, handler) => source.FocusChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.GenericMotion"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.GenericMotion"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GenericMotionWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.GenericMotionEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.GenericMotionEventArgs>(
                eventSource,
                (source, handler) => source.GenericMotion += handler,
                (source, handler) => source.GenericMotion -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.Hover"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.Hover"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable HoverWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.HoverEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.HoverEventArgs>(
                eventSource,
                (source, handler) => source.Hover += handler,
                (source, handler) => source.Hover -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.KeyPress"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.KeyPress"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable KeyPressWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.KeyEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.KeyEventArgs>(
                eventSource,
                (source, handler) => source.KeyPress += handler,
                (source, handler) => source.KeyPress -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.LayoutChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.LayoutChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable LayoutChangeWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.LayoutChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.LayoutChangeEventArgs>(
                eventSource,
                (source, handler) => source.LayoutChange += handler,
                (source, handler) => source.LayoutChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.LongClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.LongClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable LongClickWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.LongClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.LongClickEventArgs>(
                eventSource,
                (source, handler) => source.LongClick += handler,
                (source, handler) => source.LongClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.ScrollChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.ScrollChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollChangeWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.ScrollChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.ScrollChangeEventArgs>(
                eventSource,
                (source, handler) => source.ScrollChange += handler,
                (source, handler) => source.ScrollChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.SystemUiVisibilityChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.SystemUiVisibilityChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SystemUiVisibilityChangeWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.SystemUiVisibilityChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.SystemUiVisibilityChangeEventArgs>(
                eventSource,
                (source, handler) => source.SystemUiVisibilityChange += handler,
                (source, handler) => source.SystemUiVisibilityChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.Touch"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.Touch"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TouchWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.TouchEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.TouchEventArgs>(
                eventSource,
                (source, handler) => source.Touch += handler,
                (source, handler) => source.Touch -= handler,
                eventHandler);
        }

#if __ANDROID_28__
        /// <summary>Weak subscription on <see cref="Android.Views.View.UnhandledKeyEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.UnhandledKeyEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable UnhandledKeyEventWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.UnhandledKeyEventEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.UnhandledKeyEventEventArgs>(
                eventSource,
                (source, handler) => source.UnhandledKeyEvent += handler,
                (source, handler) => source.UnhandledKeyEvent -= handler,
                eventHandler);
        }
#endif

        /// <summary>Weak subscription on <see cref="Android.Views.View.ViewAttachedToWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.ViewAttachedToWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ViewAttachedToWindowWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.ViewAttachedToWindowEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.ViewAttachedToWindowEventArgs>(
                eventSource,
                (source, handler) => source.ViewAttachedToWindow += handler,
                (source, handler) => source.ViewAttachedToWindow -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.View.ViewDetachedFromWindow"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.View.ViewDetachedFromWindow"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ViewDetachedFromWindowWeakSubscribe(
            this Android.Views.View eventSource,
            EventHandler<Android.Views.View.ViewDetachedFromWindowEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.View, Android.Views.View.ViewDetachedFromWindowEventArgs>(
                eventSource,
                (source, handler) => source.ViewDetachedFromWindow += handler,
                (source, handler) => source.ViewDetachedFromWindow -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.ViewGroup"/> class events.</summary>
    public static class ViewGroupWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.ViewGroup.AnimationEnd"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewGroup.AnimationEnd"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationEndWeakSubscribe(
            this Android.Views.ViewGroup eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationEndEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewGroup, Android.Views.Animations.Animation.AnimationEndEventArgs>(
                eventSource,
                (source, handler) => source.AnimationEnd += handler,
                (source, handler) => source.AnimationEnd -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewGroup.AnimationRepeat"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewGroup.AnimationRepeat"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationRepeatWeakSubscribe(
            this Android.Views.ViewGroup eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationRepeatEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewGroup, Android.Views.Animations.Animation.AnimationRepeatEventArgs>(
                eventSource,
                (source, handler) => source.AnimationRepeat += handler,
                (source, handler) => source.AnimationRepeat -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewGroup.AnimationStart"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewGroup.AnimationStart"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AnimationStartWeakSubscribe(
            this Android.Views.ViewGroup eventSource,
            EventHandler<Android.Views.Animations.Animation.AnimationStartEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewGroup, Android.Views.Animations.Animation.AnimationStartEventArgs>(
                eventSource,
                (source, handler) => source.AnimationStart += handler,
                (source, handler) => source.AnimationStart -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewGroup.ChildViewAdded"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewGroup.ChildViewAdded"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChildViewAddedWeakSubscribe(
            this Android.Views.ViewGroup eventSource,
            EventHandler<Android.Views.ViewGroup.ChildViewAddedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewGroup, Android.Views.ViewGroup.ChildViewAddedEventArgs>(
                eventSource,
                (source, handler) => source.ChildViewAdded += handler,
                (source, handler) => source.ChildViewAdded -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewGroup.ChildViewRemoved"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewGroup.ChildViewRemoved"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChildViewRemovedWeakSubscribe(
            this Android.Views.ViewGroup eventSource,
            EventHandler<Android.Views.ViewGroup.ChildViewRemovedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewGroup, Android.Views.ViewGroup.ChildViewRemovedEventArgs>(
                eventSource,
                (source, handler) => source.ChildViewRemoved += handler,
                (source, handler) => source.ChildViewRemoved -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.ViewStub"/> class events.</summary>
    public static class ViewStubWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.ViewStub.InflateEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewStub.InflateEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InflateEventWeakSubscribe(
            this Android.Views.ViewStub eventSource,
            EventHandler<Android.Views.ViewStub.InflateEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewStub, Android.Views.ViewStub.InflateEventArgs>(
                eventSource,
                (source, handler) => source.InflateEvent += handler,
                (source, handler) => source.InflateEvent -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.ViewTreeObserver"/> class events.</summary>
    public static class ViewTreeObserverWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.Draw"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.Draw"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver>(
                eventSource,
                (source, handler) => source.Draw += handler,
                (source, handler) => source.Draw -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.GlobalFocusChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.GlobalFocusChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GlobalFocusChangeWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler<Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver, Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs>(
                eventSource,
                (source, handler) => source.GlobalFocusChange += handler,
                (source, handler) => source.GlobalFocusChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.GlobalLayout"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.GlobalLayout"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GlobalLayoutWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver>(
                eventSource,
                (source, handler) => source.GlobalLayout += handler,
                (source, handler) => source.GlobalLayout -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.PreDraw"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.PreDraw"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreDrawWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler<Android.Views.ViewTreeObserver.PreDrawEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver, Android.Views.ViewTreeObserver.PreDrawEventArgs>(
                eventSource,
                (source, handler) => source.PreDraw += handler,
                (source, handler) => source.PreDraw -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.ScrollChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.ScrollChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollChangedWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver>(
                eventSource,
                (source, handler) => source.ScrollChanged += handler,
                (source, handler) => source.ScrollChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.TouchModeChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.TouchModeChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TouchModeChangeWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler<Android.Views.ViewTreeObserver.TouchModeChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver, Android.Views.ViewTreeObserver.TouchModeChangeEventArgs>(
                eventSource,
                (source, handler) => source.TouchModeChange += handler,
                (source, handler) => source.TouchModeChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.WindowAttached"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.WindowAttached"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable WindowAttachedWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver>(
                eventSource,
                (source, handler) => source.WindowAttached += handler,
                (source, handler) => source.WindowAttached -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.WindowDetached"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.WindowDetached"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable WindowDetachedWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver>(
                eventSource,
                (source, handler) => source.WindowDetached += handler,
                (source, handler) => source.WindowDetached -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Views.ViewTreeObserver.WindowFocusChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.ViewTreeObserver.WindowFocusChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable WindowFocusChangeWeakSubscribe(
            this Android.Views.ViewTreeObserver eventSource,
            EventHandler<Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.ViewTreeObserver, Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs>(
                eventSource,
                (source, handler) => source.WindowFocusChange += handler,
                (source, handler) => source.WindowFocusChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Views.Window"/> class events.</summary>
    public static class WindowWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Views.Window.RestrictedCaptionArea"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Views.Window.RestrictedCaptionArea"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RestrictedCaptionAreaWeakSubscribe(
            this Android.Views.Window eventSource,
            EventHandler<Android.Views.Window.RestrictedCaptionAreaChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Views.Window, Android.Views.Window.RestrictedCaptionAreaChangedEventArgs>(
                eventSource,
                (source, handler) => source.RestrictedCaptionArea += handler,
                (source, handler) => source.RestrictedCaptionArea -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Webkit.WebView"/> class events.</summary>
    public static class WebViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Webkit.WebView.Download"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Webkit.WebView.Download"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DownloadWeakSubscribe(
            this Android.Webkit.WebView eventSource,
            EventHandler<Android.Webkit.DownloadEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Webkit.WebView, Android.Webkit.DownloadEventArgs>(
                eventSource,
                (source, handler) => source.Download += handler,
                (source, handler) => source.Download -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Webkit.WebView.Find"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Webkit.WebView.Find"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable FindWeakSubscribe(
            this Android.Webkit.WebView eventSource,
            EventHandler<Android.Webkit.WebView.FindEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Webkit.WebView, Android.Webkit.WebView.FindEventArgs>(
                eventSource,
                (source, handler) => source.Find += handler,
                (source, handler) => source.Find -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Webkit.WebView.Picture"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Webkit.WebView.Picture"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PictureWeakSubscribe(
            this Android.Webkit.WebView eventSource,
            EventHandler<Android.Webkit.WebView.PictureEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Webkit.WebView, Android.Webkit.WebView.PictureEventArgs>(
                eventSource,
                (source, handler) => source.Picture += handler,
                (source, handler) => source.Picture -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.AbsListView"/> class events.</summary>
    public static class AbsListViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.AbsListView.Recycler"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AbsListView.Recycler"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RecyclerWeakSubscribe(
            this Android.Widget.AbsListView eventSource,
            EventHandler<Android.Widget.AbsListView.RecyclerEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AbsListView, Android.Widget.AbsListView.RecyclerEventArgs>(
                eventSource,
                (source, handler) => source.Recycler += handler,
                (source, handler) => source.Recycler -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AbsListView.Scroll"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AbsListView.Scroll"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollWeakSubscribe(
            this Android.Widget.AbsListView eventSource,
            EventHandler<Android.Widget.AbsListView.ScrollEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AbsListView, Android.Widget.AbsListView.ScrollEventArgs>(
                eventSource,
                (source, handler) => source.Scroll += handler,
                (source, handler) => source.Scroll -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AbsListView.ScrollStateChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AbsListView.ScrollStateChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollStateChangedWeakSubscribe(
            this Android.Widget.AbsListView eventSource,
            EventHandler<Android.Widget.AbsListView.ScrollStateChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AbsListView, Android.Widget.AbsListView.ScrollStateChangedEventArgs>(
                eventSource,
                (source, handler) => source.ScrollStateChanged += handler,
                (source, handler) => source.ScrollStateChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ActionMenuView"/> class events.</summary>
    public static class ActionMenuViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ActionMenuView.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ActionMenuView.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this Android.Widget.ActionMenuView eventSource,
            EventHandler<Android.Widget.ActionMenuView.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ActionMenuView, Android.Widget.ActionMenuView.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.AdapterView"/> class events.</summary>
    public static class AdapterViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.AdapterView.ItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AdapterView.ItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemClickWeakSubscribe(
            this Android.Widget.AdapterView eventSource,
            EventHandler<Android.Widget.AdapterView.ItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AdapterView, Android.Widget.AdapterView.ItemClickEventArgs>(
                eventSource,
                (source, handler) => source.ItemClick += handler,
                (source, handler) => source.ItemClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AdapterView.ItemLongClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AdapterView.ItemLongClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemLongClickWeakSubscribe(
            this Android.Widget.AdapterView eventSource,
            EventHandler<Android.Widget.AdapterView.ItemLongClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AdapterView, Android.Widget.AdapterView.ItemLongClickEventArgs>(
                eventSource,
                (source, handler) => source.ItemLongClick += handler,
                (source, handler) => source.ItemLongClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AdapterView.ItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AdapterView.ItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemSelectedWeakSubscribe(
            this Android.Widget.AdapterView eventSource,
            EventHandler<Android.Widget.AdapterView.ItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AdapterView, Android.Widget.AdapterView.ItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ItemSelected += handler,
                (source, handler) => source.ItemSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AdapterView.ItemSelectionCleared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AdapterView.ItemSelectionCleared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        [Obsolete("Use NothingSelected event instead.")]
        public static IDisposable ItemSelectionClearedWeakSubscribe(
            this Android.Widget.AdapterView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AdapterView>(
                eventSource,
                (source, handler) => source.ItemSelectionCleared += handler,
                (source, handler) => source.ItemSelectionCleared -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AdapterView.NothingSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AdapterView.NothingSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NothingSelectedWeakSubscribe(
            this Android.Widget.AdapterView eventSource,
            EventHandler<Android.Widget.AdapterView.NothingSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AdapterView, Android.Widget.AdapterView.NothingSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NothingSelected += handler,
                (source, handler) => source.NothingSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.AutoCompleteTextView"/> class events.</summary>
    public static class AutoCompleteTextViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.AutoCompleteTextView.Dismiss"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AutoCompleteTextView.Dismiss"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissWeakSubscribe(
            this Android.Widget.AutoCompleteTextView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AutoCompleteTextView>(
                eventSource,
                (source, handler) => source.Dismiss += handler,
                (source, handler) => source.Dismiss -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AutoCompleteTextView.ItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AutoCompleteTextView.ItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemClickWeakSubscribe(
            this Android.Widget.AutoCompleteTextView eventSource,
            EventHandler<Android.Widget.AdapterView.ItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AutoCompleteTextView, Android.Widget.AdapterView.ItemClickEventArgs>(
                eventSource,
                (source, handler) => source.ItemClick += handler,
                (source, handler) => source.ItemClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AutoCompleteTextView.ItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AutoCompleteTextView.ItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemSelectedWeakSubscribe(
            this Android.Widget.AutoCompleteTextView eventSource,
            EventHandler<Android.Widget.AdapterView.ItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AutoCompleteTextView, Android.Widget.AdapterView.ItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ItemSelected += handler,
                (source, handler) => source.ItemSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AutoCompleteTextView.ItemSelectionCleared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AutoCompleteTextView.ItemSelectionCleared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        [Obsolete("Use NothingSelected event instead.")]
        public static IDisposable ItemSelectionClearedWeakSubscribe(
            this Android.Widget.AutoCompleteTextView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AutoCompleteTextView>(
                eventSource,
                (source, handler) => source.ItemSelectionCleared += handler,
                (source, handler) => source.ItemSelectionCleared -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.AutoCompleteTextView.NothingSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.AutoCompleteTextView.NothingSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NothingSelectedWeakSubscribe(
            this Android.Widget.AutoCompleteTextView eventSource,
            EventHandler<Android.Widget.AdapterView.NothingSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.AutoCompleteTextView, Android.Widget.AdapterView.NothingSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NothingSelected += handler,
                (source, handler) => source.NothingSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.CalendarView"/> class events.</summary>
    public static class CalendarViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.CalendarView.DateChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.CalendarView.DateChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DateChangeWeakSubscribe(
            this Android.Widget.CalendarView eventSource,
            EventHandler<Android.Widget.CalendarView.DateChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.CalendarView, Android.Widget.CalendarView.DateChangeEventArgs>(
                eventSource,
                (source, handler) => source.DateChange += handler,
                (source, handler) => source.DateChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.Chronometer"/> class events.</summary>
    public static class ChronometerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.Chronometer.ChronometerTick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.Chronometer.ChronometerTick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChronometerTickWeakSubscribe(
            this Android.Widget.Chronometer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.Chronometer>(
                eventSource,
                (source, handler) => source.ChronometerTick += handler,
                (source, handler) => source.ChronometerTick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.CompoundButton"/> class events.</summary>
    public static class CompoundButtonWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.CompoundButton.CheckedChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.CompoundButton.CheckedChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CheckedChangeWeakSubscribe(
            this Android.Widget.CompoundButton eventSource,
            EventHandler<Android.Widget.CompoundButton.CheckedChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.CompoundButton, Android.Widget.CompoundButton.CheckedChangeEventArgs>(
                eventSource,
                (source, handler) => source.CheckedChange += handler,
                (source, handler) => source.CheckedChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.DatePicker"/> class events.</summary>
    public static class DatePickerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.DatePicker.DateChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.DatePicker.DateChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DateChangedWeakSubscribe(
            this Android.Widget.DatePicker eventSource,
            EventHandler<Android.Widget.DatePicker.DateChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.DatePicker, Android.Widget.DatePicker.DateChangedEventArgs>(
                eventSource,
                (source, handler) => source.DateChanged += handler,
                (source, handler) => source.DateChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ExpandableListView"/> class events.</summary>
    public static class ExpandableListViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ExpandableListView.ChildClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ExpandableListView.ChildClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ChildClickWeakSubscribe(
            this Android.Widget.ExpandableListView eventSource,
            EventHandler<Android.Widget.ExpandableListView.ChildClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ExpandableListView, Android.Widget.ExpandableListView.ChildClickEventArgs>(
                eventSource,
                (source, handler) => source.ChildClick += handler,
                (source, handler) => source.ChildClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ExpandableListView.GroupClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ExpandableListView.GroupClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GroupClickWeakSubscribe(
            this Android.Widget.ExpandableListView eventSource,
            EventHandler<Android.Widget.ExpandableListView.GroupClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ExpandableListView, Android.Widget.ExpandableListView.GroupClickEventArgs>(
                eventSource,
                (source, handler) => source.GroupClick += handler,
                (source, handler) => source.GroupClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ExpandableListView.GroupCollapse"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ExpandableListView.GroupCollapse"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GroupCollapseWeakSubscribe(
            this Android.Widget.ExpandableListView eventSource,
            EventHandler<Android.Widget.ExpandableListView.GroupCollapseEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ExpandableListView, Android.Widget.ExpandableListView.GroupCollapseEventArgs>(
                eventSource,
                (source, handler) => source.GroupCollapse += handler,
                (source, handler) => source.GroupCollapse -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ExpandableListView.GroupExpand"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ExpandableListView.GroupExpand"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable GroupExpandWeakSubscribe(
            this Android.Widget.ExpandableListView eventSource,
            EventHandler<Android.Widget.ExpandableListView.GroupExpandEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ExpandableListView, Android.Widget.ExpandableListView.GroupExpandEventArgs>(
                eventSource,
                (source, handler) => source.GroupExpand += handler,
                (source, handler) => source.GroupExpand -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ListPopupWindow"/> class events.</summary>
    public static class ListPopupWindowWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ListPopupWindow.DismissEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ListPopupWindow.DismissEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissEventWeakSubscribe(
            this Android.Widget.ListPopupWindow eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ListPopupWindow>(
                eventSource,
                (source, handler) => source.DismissEvent += handler,
                (source, handler) => source.DismissEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ListPopupWindow.ItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ListPopupWindow.ItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemClickWeakSubscribe(
            this Android.Widget.ListPopupWindow eventSource,
            EventHandler<Android.Widget.AdapterView.ItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ListPopupWindow, Android.Widget.AdapterView.ItemClickEventArgs>(
                eventSource,
                (source, handler) => source.ItemClick += handler,
                (source, handler) => source.ItemClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ListPopupWindow.ItemSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ListPopupWindow.ItemSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ItemSelectedWeakSubscribe(
            this Android.Widget.ListPopupWindow eventSource,
            EventHandler<Android.Widget.AdapterView.ItemSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ListPopupWindow, Android.Widget.AdapterView.ItemSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ItemSelected += handler,
                (source, handler) => source.ItemSelected -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ListPopupWindow.NothingSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ListPopupWindow.NothingSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NothingSelectedWeakSubscribe(
            this Android.Widget.ListPopupWindow eventSource,
            EventHandler<Android.Widget.AdapterView.NothingSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ListPopupWindow, Android.Widget.AdapterView.NothingSelectedEventArgs>(
                eventSource,
                (source, handler) => source.NothingSelected += handler,
                (source, handler) => source.NothingSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.MediaController"/> class events.</summary>
    public static class MediaControllerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.MediaController.NextClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.MediaController.NextClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NextClickWeakSubscribe(
            this Android.Widget.MediaController eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.MediaController>(
                eventSource,
                (source, handler) => source.NextClick += handler,
                (source, handler) => source.NextClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.MediaController.PreviousClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.MediaController.PreviousClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreviousClickWeakSubscribe(
            this Android.Widget.MediaController eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.MediaController>(
                eventSource,
                (source, handler) => source.PreviousClick += handler,
                (source, handler) => source.PreviousClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.NumberPicker"/> class events.</summary>
    public static class NumberPickerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.NumberPicker.Scroll"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.NumberPicker.Scroll"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollWeakSubscribe(
            this Android.Widget.NumberPicker eventSource,
            EventHandler<Android.Widget.NumberPicker.ScrollEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.NumberPicker, Android.Widget.NumberPicker.ScrollEventArgs>(
                eventSource,
                (source, handler) => source.Scroll += handler,
                (source, handler) => source.Scroll -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.NumberPicker.ValueChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.NumberPicker.ValueChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ValueChangedWeakSubscribe(
            this Android.Widget.NumberPicker eventSource,
            EventHandler<Android.Widget.NumberPicker.ValueChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.NumberPicker, Android.Widget.NumberPicker.ValueChangeEventArgs>(
                eventSource,
                (source, handler) => source.ValueChanged += handler,
                (source, handler) => source.ValueChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.PopupMenu"/> class events.</summary>
    public static class PopupMenuWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.PopupMenu.DismissEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.PopupMenu.DismissEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissEventWeakSubscribe(
            this Android.Widget.PopupMenu eventSource,
            EventHandler<Android.Widget.PopupMenu.DismissEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.PopupMenu, Android.Widget.PopupMenu.DismissEventArgs>(
                eventSource,
                (source, handler) => source.DismissEvent += handler,
                (source, handler) => source.DismissEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.PopupMenu.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.PopupMenu.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this Android.Widget.PopupMenu eventSource,
            EventHandler<Android.Widget.PopupMenu.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.PopupMenu, Android.Widget.PopupMenu.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.PopupWindow"/> class events.</summary>
    public static class PopupWindowWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.PopupWindow.DismissEvent"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.PopupWindow.DismissEvent"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DismissEventWeakSubscribe(
            this Android.Widget.PopupWindow eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.PopupWindow>(
                eventSource,
                (source, handler) => source.DismissEvent += handler,
                (source, handler) => source.DismissEvent -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.PopupWindow.TouchIntercepted"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.PopupWindow.TouchIntercepted"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TouchInterceptedWeakSubscribe(
            this Android.Widget.PopupWindow eventSource,
            EventHandler<Android.Views.View.TouchEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.PopupWindow, Android.Views.View.TouchEventArgs>(
                eventSource,
                (source, handler) => source.TouchIntercepted += handler,
                (source, handler) => source.TouchIntercepted -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.RadioGroup"/> class events.</summary>
    public static class RadioGroupWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.RadioGroup.CheckedChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.RadioGroup.CheckedChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CheckedChangeWeakSubscribe(
            this Android.Widget.RadioGroup eventSource,
            EventHandler<Android.Widget.RadioGroup.CheckedChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.RadioGroup, Android.Widget.RadioGroup.CheckedChangeEventArgs>(
                eventSource,
                (source, handler) => source.CheckedChange += handler,
                (source, handler) => source.CheckedChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.RatingBar"/> class events.</summary>
    public static class RatingBarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.RatingBar.RatingBarChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.RatingBar.RatingBarChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable RatingBarChangeWeakSubscribe(
            this Android.Widget.RatingBar eventSource,
            EventHandler<Android.Widget.RatingBar.RatingBarChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.RatingBar, Android.Widget.RatingBar.RatingBarChangeEventArgs>(
                eventSource,
                (source, handler) => source.RatingBarChange += handler,
                (source, handler) => source.RatingBarChange -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.SearchView"/> class events.</summary>
    public static class SearchViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.Close"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.Close"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CloseWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Widget.SearchView.CloseEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Widget.SearchView.CloseEventArgs>(
                eventSource,
                (source, handler) => source.Close += handler,
                (source, handler) => source.Close -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.QueryTextChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.QueryTextChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable QueryTextChangeWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Widget.SearchView.QueryTextChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Widget.SearchView.QueryTextChangeEventArgs>(
                eventSource,
                (source, handler) => source.QueryTextChange += handler,
                (source, handler) => source.QueryTextChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.QueryTextFocusChange"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.QueryTextFocusChange"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable QueryTextFocusChangeWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Views.View.FocusChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Views.View.FocusChangeEventArgs>(
                eventSource,
                (source, handler) => source.QueryTextFocusChange += handler,
                (source, handler) => source.QueryTextFocusChange -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.QueryTextSubmit"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.QueryTextSubmit"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable QueryTextSubmitWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Widget.SearchView.QueryTextSubmitEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Widget.SearchView.QueryTextSubmitEventArgs>(
                eventSource,
                (source, handler) => source.QueryTextSubmit += handler,
                (source, handler) => source.QueryTextSubmit -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.SearchClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.SearchClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SearchClickWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView>(
                eventSource,
                (source, handler) => source.SearchClick += handler,
                (source, handler) => source.SearchClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.SuggestionClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.SuggestionClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SuggestionClickWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Widget.SearchView.SuggestionClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Widget.SearchView.SuggestionClickEventArgs>(
                eventSource,
                (source, handler) => source.SuggestionClick += handler,
                (source, handler) => source.SuggestionClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SearchView.SuggestionSelect"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SearchView.SuggestionSelect"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable SuggestionSelectWeakSubscribe(
            this Android.Widget.SearchView eventSource,
            EventHandler<Android.Widget.SearchView.SuggestionSelectEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SearchView, Android.Widget.SearchView.SuggestionSelectEventArgs>(
                eventSource,
                (source, handler) => source.SuggestionSelect += handler,
                (source, handler) => source.SuggestionSelect -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.SeekBar"/> class events.</summary>
    public static class SeekBarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.SeekBar.ProgressChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SeekBar.ProgressChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ProgressChangedWeakSubscribe(
            this Android.Widget.SeekBar eventSource,
            EventHandler<Android.Widget.SeekBar.ProgressChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SeekBar, Android.Widget.SeekBar.ProgressChangedEventArgs>(
                eventSource,
                (source, handler) => source.ProgressChanged += handler,
                (source, handler) => source.ProgressChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SeekBar.StartTrackingTouch"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SeekBar.StartTrackingTouch"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable StartTrackingTouchWeakSubscribe(
            this Android.Widget.SeekBar eventSource,
            EventHandler<Android.Widget.SeekBar.StartTrackingTouchEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SeekBar, Android.Widget.SeekBar.StartTrackingTouchEventArgs>(
                eventSource,
                (source, handler) => source.StartTrackingTouch += handler,
                (source, handler) => source.StartTrackingTouch -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SeekBar.StopTrackingTouch"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SeekBar.StopTrackingTouch"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable StopTrackingTouchWeakSubscribe(
            this Android.Widget.SeekBar eventSource,
            EventHandler<Android.Widget.SeekBar.StopTrackingTouchEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SeekBar, Android.Widget.SeekBar.StopTrackingTouchEventArgs>(
                eventSource,
                (source, handler) => source.StopTrackingTouch += handler,
                (source, handler) => source.StopTrackingTouch -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ShareActionProvider"/> class events.</summary>
    public static class ShareActionProviderWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ShareActionProvider.ShareTargetSelected"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ShareActionProvider.ShareTargetSelected"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ShareTargetSelectedWeakSubscribe(
            this Android.Widget.ShareActionProvider eventSource,
            EventHandler<Android.Widget.ShareActionProvider.ShareTargetSelectedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ShareActionProvider, Android.Widget.ShareActionProvider.ShareTargetSelectedEventArgs>(
                eventSource,
                (source, handler) => source.ShareTargetSelected += handler,
                (source, handler) => source.ShareTargetSelected -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.SlidingDrawer"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class SlidingDrawerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.SlidingDrawer.DrawerClose"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SlidingDrawer.DrawerClose"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerCloseWeakSubscribe(
            this Android.Widget.SlidingDrawer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SlidingDrawer>(
                eventSource,
                (source, handler) => source.DrawerClose += handler,
                (source, handler) => source.DrawerClose -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SlidingDrawer.DrawerOpen"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SlidingDrawer.DrawerOpen"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable DrawerOpenWeakSubscribe(
            this Android.Widget.SlidingDrawer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SlidingDrawer>(
                eventSource,
                (source, handler) => source.DrawerOpen += handler,
                (source, handler) => source.DrawerOpen -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SlidingDrawer.ScrollEnded"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SlidingDrawer.ScrollEnded"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollEndedWeakSubscribe(
            this Android.Widget.SlidingDrawer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SlidingDrawer>(
                eventSource,
                (source, handler) => source.ScrollEnded += handler,
                (source, handler) => source.ScrollEnded -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.SlidingDrawer.ScrollStarted"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.SlidingDrawer.ScrollStarted"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ScrollStartedWeakSubscribe(
            this Android.Widget.SlidingDrawer eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.SlidingDrawer>(
                eventSource,
                (source, handler) => source.ScrollStarted += handler,
                (source, handler) => source.ScrollStarted -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.TabHost"/> class events.</summary>
    public static class TabHostWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.TabHost.TabChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TabHost.TabChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TabChangedWeakSubscribe(
            this Android.Widget.TabHost eventSource,
            EventHandler<Android.Widget.TabHost.TabChangeEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TabHost, Android.Widget.TabHost.TabChangeEventArgs>(
                eventSource,
                (source, handler) => source.TabChanged += handler,
                (source, handler) => source.TabChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.TextView"/> class events.</summary>
    public static class TextViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.TextView.AfterTextChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TextView.AfterTextChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable AfterTextChangedWeakSubscribe(
            this Android.Widget.TextView eventSource,
            EventHandler<Android.Text.AfterTextChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TextView, Android.Text.AfterTextChangedEventArgs>(
                eventSource,
                (source, handler) => source.AfterTextChanged += handler,
                (source, handler) => source.AfterTextChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.TextView.BeforeTextChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TextView.BeforeTextChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable BeforeTextChangedWeakSubscribe(
            this Android.Widget.TextView eventSource,
            EventHandler<Android.Text.TextChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TextView, Android.Text.TextChangedEventArgs>(
                eventSource,
                (source, handler) => source.BeforeTextChanged += handler,
                (source, handler) => source.BeforeTextChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.TextView.EditorAction"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TextView.EditorAction"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable EditorActionWeakSubscribe(
            this Android.Widget.TextView eventSource,
            EventHandler<Android.Widget.TextView.EditorActionEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TextView, Android.Widget.TextView.EditorActionEventArgs>(
                eventSource,
                (source, handler) => source.EditorAction += handler,
                (source, handler) => source.EditorAction -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.TextView.TextChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TextView.TextChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TextChangedWeakSubscribe(
            this Android.Widget.TextView eventSource,
            EventHandler<Android.Text.TextChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TextView, Android.Text.TextChangedEventArgs>(
                eventSource,
                (source, handler) => source.TextChanged += handler,
                (source, handler) => source.TextChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.TimePicker"/> class events.</summary>
    public static class TimePickerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.TimePicker.TimeChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.TimePicker.TimeChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable TimeChangedWeakSubscribe(
            this Android.Widget.TimePicker eventSource,
            EventHandler<Android.Widget.TimePicker.TimeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.TimePicker, Android.Widget.TimePicker.TimeChangedEventArgs>(
                eventSource,
                (source, handler) => source.TimeChanged += handler,
                (source, handler) => source.TimeChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.Toolbar"/> class events.</summary>
    public static class ToolbarWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.Toolbar.MenuItemClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.Toolbar.MenuItemClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable MenuItemClickWeakSubscribe(
            this Android.Widget.Toolbar eventSource,
            EventHandler<Android.Widget.Toolbar.MenuItemClickEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.Toolbar, Android.Widget.Toolbar.MenuItemClickEventArgs>(
                eventSource,
                (source, handler) => source.MenuItemClick += handler,
                (source, handler) => source.MenuItemClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.Toolbar.NavigationOnClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.Toolbar.NavigationOnClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable NavigationOnClickWeakSubscribe(
            this Android.Widget.Toolbar eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.Toolbar>(
                eventSource,
                (source, handler) => source.NavigationOnClick += handler,
                (source, handler) => source.NavigationOnClick -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.VideoView"/> class events.</summary>
    public static class VideoViewWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.VideoView.Completion"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.VideoView.Completion"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable CompletionWeakSubscribe(
            this Android.Widget.VideoView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.VideoView>(
                eventSource,
                (source, handler) => source.Completion += handler,
                (source, handler) => source.Completion -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.VideoView.Error"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.VideoView.Error"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ErrorWeakSubscribe(
            this Android.Widget.VideoView eventSource,
            EventHandler<Android.Media.MediaPlayer.ErrorEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.VideoView, Android.Media.MediaPlayer.ErrorEventArgs>(
                eventSource,
                (source, handler) => source.Error += handler,
                (source, handler) => source.Error -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.VideoView.Info"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.VideoView.Info"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable InfoWeakSubscribe(
            this Android.Widget.VideoView eventSource,
            EventHandler<Android.Media.MediaPlayer.InfoEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.VideoView, Android.Media.MediaPlayer.InfoEventArgs>(
                eventSource,
                (source, handler) => source.Info += handler,
                (source, handler) => source.Info -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.VideoView.Prepared"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.VideoView.Prepared"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable PreparedWeakSubscribe(
            this Android.Widget.VideoView eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.VideoView>(
                eventSource,
                (source, handler) => source.Prepared += handler,
                (source, handler) => source.Prepared -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ZoomButtonsController"/> class events.</summary>
    [Obsolete("This class is obsoleted in this android platform.")]
    public static class ZoomButtonsControllerWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ZoomButtonsController.VisibilityChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ZoomButtonsController.VisibilityChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable VisibilityChangedWeakSubscribe(
            this Android.Widget.ZoomButtonsController eventSource,
            EventHandler<Android.Widget.ZoomButtonsController.VisibilityChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ZoomButtonsController, Android.Widget.ZoomButtonsController.VisibilityChangedEventArgs>(
                eventSource,
                (source, handler) => source.VisibilityChanged += handler,
                (source, handler) => source.VisibilityChanged -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ZoomButtonsController.Zoom"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ZoomButtonsController.Zoom"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ZoomWeakSubscribe(
            this Android.Widget.ZoomButtonsController eventSource,
            EventHandler<Android.Widget.ZoomButtonsController.ZoomEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ZoomButtonsController, Android.Widget.ZoomButtonsController.ZoomEventArgs>(
                eventSource,
                (source, handler) => source.Zoom += handler,
                (source, handler) => source.Zoom -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Android.Widget.ZoomControls"/> class events.</summary>
    public static class ZoomControlsWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Android.Widget.ZoomControls.ZoomInClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ZoomControls.ZoomInClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ZoomInClickWeakSubscribe(
            this Android.Widget.ZoomControls eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ZoomControls>(
                eventSource,
                (source, handler) => source.ZoomInClick += handler,
                (source, handler) => source.ZoomInClick -= handler,
                eventHandler);
        }

        /// <summary>Weak subscription on <see cref="Android.Widget.ZoomControls.ZoomOutClick"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Android.Widget.ZoomControls.ZoomOutClick"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ZoomOutClickWeakSubscribe(
            this Android.Widget.ZoomControls eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Android.Widget.ZoomControls>(
                eventSource,
                (source, handler) => source.ZoomOutClick += handler,
                (source, handler) => source.ZoomOutClick -= handler,
                eventHandler);
        }

    }
}

