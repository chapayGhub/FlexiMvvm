// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using FlexiMvvm.Bindings;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using Foundation;

namespace FlexiMvvm.Views
{
    public partial class FlexiBindablePageViewController<TViewModel> : FlexiMvvm.Views.FlexiPageViewController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiBindablePageViewController()
        {
        }

        /// <inheritdoc />
        public FlexiBindablePageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindablePageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindablePageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindablePageViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindablePageViewController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class FlexiBindablePageViewController<TViewModel, TParameters> : FlexiMvvm.Views.FlexiPageViewController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public FlexiBindablePageViewController()
        {
        }

        /// <inheritdoc />
        public FlexiBindablePageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindablePageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindablePageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindablePageViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindablePageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlexiBindableTabBarController<TViewModel> : FlexiMvvm.Views.FlexiTabBarController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiBindableTabBarController()
        {
        }

        /// <inheritdoc />
        public FlexiBindableTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindableTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindableTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindableTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindableTabBarController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class FlexiBindableTabBarController<TViewModel, TParameters> : FlexiMvvm.Views.FlexiTabBarController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public FlexiBindableTabBarController()
        {
        }

        /// <inheritdoc />
        public FlexiBindableTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindableTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindableTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindableTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindableTabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlexiBindableViewController<TViewModel> : FlexiMvvm.Views.FlexiViewController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiBindableViewController()
        {
        }

        /// <inheritdoc />
        public FlexiBindableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindableViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindableViewController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class FlexiBindableViewController<TViewModel, TParameters> : FlexiMvvm.Views.FlexiViewController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public FlexiBindableViewController()
        {
        }

        /// <inheritdoc />
        public FlexiBindableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiBindableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiBindableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiBindableViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<FlexiBindableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

