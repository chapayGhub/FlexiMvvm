// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using FlexiMvvm.Views.Keyboard;
using Foundation;
using UIKit;

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiCollectionViewController : UIKit.UICollectionViewController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiCollectionViewController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiCollectionViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiCollectionViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiCollectionViewController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiCollectionViewController<TViewModel> : FlexiCollectionViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiCollectionViewController()
        {
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiCollectionViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiCollectionViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiCollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiCollectionViewController<TViewModel, TParameters> : FlexiCollectionViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiCollectionViewController()
        {
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiCollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiCollectionViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiCollectionViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiCollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiNavigationController : UIKit.UINavigationController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiNavigationController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiNavigationController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiNavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiNavigationController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiNavigationController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiNavigationController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiNavigationController<TViewModel> : FlexiNavigationController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiNavigationController()
        {
        }

        /// <inheritdoc />
        public FlexiNavigationController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiNavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiNavigationController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiNavigationController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiNavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiNavigationController<TViewModel, TParameters> : FlexiNavigationController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiNavigationController()
        {
        }

        /// <inheritdoc />
        public FlexiNavigationController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiNavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiNavigationController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiNavigationController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiNavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiPageViewController : UIKit.UIPageViewController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiPageViewController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiPageViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiPageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiPageViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiPageViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiPageViewController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiPageViewController<TViewModel> : FlexiPageViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiPageViewController()
        {
        }

        /// <inheritdoc />
        public FlexiPageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiPageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiPageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiPageViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiPageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiPageViewController<TViewModel, TParameters> : FlexiPageViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiPageViewController()
        {
        }

        /// <inheritdoc />
        public FlexiPageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiPageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiPageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiPageViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiPageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiSplitViewController : UIKit.UISplitViewController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiSplitViewController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiSplitViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiSplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiSplitViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiSplitViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiSplitViewController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiSplitViewController<TViewModel> : FlexiSplitViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiSplitViewController()
        {
        }

        /// <inheritdoc />
        public FlexiSplitViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiSplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiSplitViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiSplitViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiSplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiSplitViewController<TViewModel, TParameters> : FlexiSplitViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiSplitViewController()
        {
        }

        /// <inheritdoc />
        public FlexiSplitViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiSplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiSplitViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiSplitViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiSplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiTabBarController : UIKit.UITabBarController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiTabBarController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiTabBarController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiTabBarController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiTabBarController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTabBarController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiTabBarController<TViewModel> : FlexiTabBarController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiTabBarController()
        {
        }

        /// <inheritdoc />
        public FlexiTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiTabBarController<TViewModel, TParameters> : FlexiTabBarController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiTabBarController()
        {
        }

        /// <inheritdoc />
        public FlexiTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiTableViewController : UIKit.UITableViewController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiTableViewController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiTableViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiTableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiTableViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiTableViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTableViewController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiTableViewController<TViewModel> : FlexiTableViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiTableViewController()
        {
        }

        /// <inheritdoc />
        public FlexiTableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiTableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiTableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiTableViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiTableViewController<TViewModel, TParameters> : FlexiTableViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiTableViewController()
        {
        }

        /// <inheritdoc />
        public FlexiTableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiTableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiTableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiTableViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiTableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents a/an <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class FlexiViewController : UIKit.UIViewController, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public FlexiViewController()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public FlexiViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected FlexiViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal FlexiViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler ??= Keyboard.KeyboardHandler.Create(View);

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiViewController>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiViewController<TViewModel> : FlexiViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public FlexiViewController()
        {
        }

        /// <inheritdoc />
        public FlexiViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class FlexiViewController<TViewModel, TParameters> : FlexiViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public FlexiViewController()
        {
        }

        /// <inheritdoc />
        public FlexiViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public FlexiViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected FlexiViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal FlexiViewController(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlexiViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

